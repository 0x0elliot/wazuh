---
test_name: PUT /security/roles

includes:
  - !include common.yaml

#marks:
#  - usefixtures:
#    - security_tests

stages:

  # Authentication stage
  - type: ref
    id: login_get_token

  # PUT /security/roles/{role_id}
  - name: Modify a role in the system
    request: &modify_role_request
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "testModified"
        rule:
          MATCH:
            normal_user: "get_permissionsM"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModified
              policies: []
              rule:
                MATCH:
                  normal_user: "get_permissionsM"
          total_affected_items: 1

  # PUT /security/roles/{role_id}
  - name: Modify a role in the system (without change rule)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "testModified2"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModified2
              policies: []
              rule:
                MATCH:
                  normal_user: "get_permissionsM"
          total_affected_items: 1

  # PUT /security/roles/{role_id}
  - name: Modify a role in the system (without change name)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        rule:
          MATCH:
            normal_user: "get_permissionsM2"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModified2
              policies: []
              rule:
                MATCH:
                  normal_user: "get_permissionsM2"
          total_affected_items: 1

  # PUT /security/roles/{non-existent role_id}
  - name: Modify a non-existent role in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "Unexistent"
        rule:
          user: "no"
    response:
      status_code: 400
      body: &error_response_role
        code: !anyint
        dapi_errors: !anything
        detail: !anystr
        status: 400
        title: !anystr
        type: "about:blank"
---
test_name: PUT /security/policies

stages:

  # PUT /security/policies/{policy_id}
  - name: Modify a policy in the system
    request: &modify_policy_request
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "testModifiedPolicy"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:001"
            - "agent:id:002"
            - "agent:id:003"
          effect: "allow"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModifiedPolicy
              policy:
                actions:
                  - agent:delete
                effect: allow
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles: []
          total_affected_items: 1

  # PUT /security/policies/{policy_id}
  - name: Modify a policy in the system (without change policy definition)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "testModifiedPolicy2"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModifiedPolicy2
              policy:
                actions:
                  - agent:delete
                effect: allow
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles: []
          total_affected_items: 1

  # PUT /security/policies/{policy_id}
  - name: Modify a policy in the system (without change name)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:001"
            - "agent:id:002"
            - "agent:id:003"
          effect: "deny"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - id: 2
              name: testModifiedPolicy2
              policy:
                actions:
                  - agent:delete
                effect: deny
                resources:
                  - agent:id:001
                  - agent:id:002
                  - agent:id:003
              roles: []
          total_affected_items: 1

  # PUT /security/policies/{non-existent policy_id}
  - name: Modify a non-existent policy in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/999"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "Unexistent"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:001"
            - "agent:id:002"
            - "agent:id:003"
          effect: "allow"
    response:
      status_code: 400
      body: &error_response_policy
        code: !anyint
        dapi_errors: !anything
        detail: !anystr
        status: 400
        title: !anystr
        type: "about:blank"

  # PUT /security/policies/{non-existent policy_id}
  - name: Modify a policy in the system, bad policy definition
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/policies/2"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: "incorrect"
        policy:
          actions:
            - "agent:delete"
          resources:
            - "agent:id:001:"
            - "agent:id:002"
            - "agent:id:003"
    response:
      status_code: 400

---
test_name: PUT /security/roles/{role_id}/policies/{policy_id}

stages:

  # PUT /security/roles/{role_id}/policies/{list_policies}
  - name: Create link role-policy
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 2,3
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 'role 2: policy 3'
            - 'role 2: policy 2'
          total_affected_items: 2

  # PUT /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/4/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 2
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 'role 4: policy 2'
          total_affected_items: 1

  # PUT /security/roles/{role_id}/policies/{policy}
  - name: Create link role-policy
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/3/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 3
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - 'role 3: policy 3'
          total_affected_items: 1

  # PUT /security/roles/{non-existent role_id}/policies/{policy}
  - name: Create link role-policy (non-existent role)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 2,3
    response:
      status_code: 200
      body: &error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
                message: !anystr
                remediation: !anystr
              id: !anything
          total_affected_items: 0
          total_failed_items: 2

  # PUT /security/roles/{role_id}/policies/{non-existent policy}
  - name: Create link role-policy (non-existent policy)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/2/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 999,56
    response:
      status_code: 200
      body:
        <<: *error

  # PUT /security/roles/{non-existent role_id}/policies/{non-existent policy}
  - name: Create link role-policy (Both non-existent)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      params:
        policy_ids: 999,2
    response:
      status_code: 200
      body:
        <<: *error
