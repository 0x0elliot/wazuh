---
test_name: GET /security/users

includes:
  - !include common.yaml

stages:

  - type: ref
    id: login_get_token

  - name: Get all users in the system
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: new_user
            - username: new_user1
            - username: wazuh
            - username: wazuh-app
          total_affected_items: 4
        message: !anystr
---
test_name: GET /security/users

stages:

  - name: Get a specified user by its username
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: wazuh
    response:
      status_code: 200
      body:
        data:
          affected_items: &user
            - username: !anystr
          total_affected_items: 1

  - name: Get a specified user by its username
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: wazuh,wazuh-app
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - <<: *user
            - <<: *user
          total_affected_items: 2

  - name: Get an user by its username (invalid username)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: "!!!"
    response:
      status_code: 400
      body:
        detail: !anystr
        status: !anyint
        title: !anystr
        type: !anystr

  - name: Get an user by its username (invalid username)
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: "####@@@|#|"
    response:
      status_code: 400
      body:
        detail: !anystr
        status: !anyint
        title: !anystr
        type: !anystr

  - name: Get an non-existent user by its username
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: NotFound
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - NotFound
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  - name: Get two non-existent users by their usernames
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: NotFound,NotFound1
    response:
      status_code: 200
      body:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - NotFound
                - NotFound1
          total_affected_items: 0
          total_failed_items: 2
        message: !anystr

  - name: Get two non-existent users and an existing one by their usernames
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: NotFound,NotFound1,wazuh
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: wazuh
          failed_items:
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - NotFound
                - NotFound1
          total_affected_items: 1
          total_failed_items: 2
        message: !anystr

  - name: Get two non-existent users and two existent by their usernames
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: NotFound,NotFound1,wazuh-app,wazuh
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: wazuh
            - username: wazuh-app
          failed_items:
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - NotFound
                - NotFound1
          total_affected_items: 2
          total_failed_items: 2
        message: !anystr
---
test_name: GET /security/users/?search

marks:
  - parametrize:
      key: field
      vals:
        - wazuh-app
        - new_user1

stages:
  - name: Testing search
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        search: "{field}"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: "{field}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Testing complementary search
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        search: "-wazuh"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: new_user
            - username: new_user1
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0
        message: !anystr

---
test_name: GET /security/users/?sort

stages:
  - name: Testing inverse sort
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        sort: "-username"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: wazuh-app
            - username: wazuh
            - username: new_user1
            - username: new_user
          total_affected_items: 4
        message: !anystr

  - name: Testing sort
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        sort: "username"
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: new_user
            - username: new_user1
            - username: wazuh
            - username: wazuh-app
          total_affected_items: 4
        message: !anystr

---
test_name: GET /security/users/?limit,offset

stages:
  - name: Testing offset
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        offset: 3
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: wazuh-app
          total_affected_items: 4
        message: !anystr

  - name: Testing limit
    request:
      url: "{protocol:s}://{host:s}:{port:d}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        limit: 1
    response:
      status_code: 200
      body:
        data:
          affected_items:
            - username: new_user
          total_affected_items: 4
        message: !anystr
