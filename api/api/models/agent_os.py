# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api import util


class AgentOs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, major: str=None, name: str=None, uname: str=None, platform: str=None, version: str=None, codename: str=None, arch: str=None, minor: str=None):  # noqa: E501
        """AgentOs - a model defined in Swagger

        :param major: The major of this AgentOs.  # noqa: E501
        :type major: str
        :param name: The name of this AgentOs.  # noqa: E501
        :type name: str
        :param uname: The uname of this AgentOs.  # noqa: E501
        :type uname: str
        :param platform: The platform of this AgentOs.  # noqa: E501
        :type platform: str
        :param version: The version of this AgentOs.  # noqa: E501
        :type version: str
        :param codename: The codename of this AgentOs.  # noqa: E501
        :type codename: str
        :param arch: The arch of this AgentOs.  # noqa: E501
        :type arch: str
        :param minor: The minor of this AgentOs.  # noqa: E501
        :type minor: str
        """
        self.swagger_types = {
            'major': str,
            'name': str,
            'uname': str,
            'platform': str,
            'version': str,
            'codename': str,
            'arch': str,
            'minor': str
        }

        self.attribute_map = {
            'major': 'major',
            'name': 'name',
            'uname': 'uname',
            'platform': 'platform',
            'version': 'version',
            'codename': 'codename',
            'arch': 'arch',
            'minor': 'minor'
        }

        self._major = major
        self._name = name
        self._uname = uname
        self._platform = platform
        self._version = version
        self._codename = codename
        self._arch = arch
        self._minor = minor

    @classmethod
    def from_dict(cls, dikt) -> 'AgentOs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Agent_os of this AgentOs.  # noqa: E501
        :rtype: AgentOs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def major(self) -> str:
        """Gets the major of this AgentOs.


        :return: The major of this AgentOs.
        :rtype: str
        """
        return self._major

    @major.setter
    def major(self, major: str):
        """Sets the major of this AgentOs.


        :param major: The major of this AgentOs.
        :type major: str
        """

        self._major = major

    @property
    def name(self) -> str:
        """Gets the name of this AgentOs.


        :return: The name of this AgentOs.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AgentOs.


        :param name: The name of this AgentOs.
        :type name: str
        """

        self._name = name

    @property
    def uname(self) -> str:
        """Gets the uname of this AgentOs.


        :return: The uname of this AgentOs.
        :rtype: str
        """
        return self._uname

    @uname.setter
    def uname(self, uname: str):
        """Sets the uname of this AgentOs.


        :param uname: The uname of this AgentOs.
        :type uname: str
        """

        self._uname = uname

    @property
    def platform(self) -> str:
        """Gets the platform of this AgentOs.


        :return: The platform of this AgentOs.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this AgentOs.


        :param platform: The platform of this AgentOs.
        :type platform: str
        """

        self._platform = platform

    @property
    def version(self) -> str:
        """Gets the version of this AgentOs.


        :return: The version of this AgentOs.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this AgentOs.


        :param version: The version of this AgentOs.
        :type version: str
        """

        self._version = version

    @property
    def codename(self) -> str:
        """Gets the codename of this AgentOs.


        :return: The codename of this AgentOs.
        :rtype: str
        """
        return self._codename

    @codename.setter
    def codename(self, codename: str):
        """Sets the codename of this AgentOs.


        :param codename: The codename of this AgentOs.
        :type codename: str
        """

        self._codename = codename

    @property
    def arch(self) -> str:
        """Gets the arch of this AgentOs.


        :return: The arch of this AgentOs.
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch: str):
        """Sets the arch of this AgentOs.


        :param arch: The arch of this AgentOs.
        :type arch: str
        """

        self._arch = arch

    @property
    def minor(self) -> str:
        """Gets the minor of this AgentOs.


        :return: The minor of this AgentOs.
        :rtype: str
        """
        return self._minor

    @minor.setter
    def minor(self, minor: str):
        """Sets the minor of this AgentOs.


        :param minor: The minor of this AgentOs.
        :type minor: str
        """

        self._minor = minor
