# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from api.models.base_model_ import Model
from api.models.agent_os import AgentOs  # noqa: F401,E501
from api.models.agent_status import AgentStatus  # noqa: F401,E501
from api import util


class Agent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: AgentStatus=None, config_sum: str=None, group: List[str]=None, name: str=None, merged_sum: str=None, ip: str=None, manager: str=None, node_name: str=None, date_add: str=None, version: str=None, last_keep_alive: str=None, os: AgentOs=None, id: str=None):  # noqa: E501
        """Agent - a model defined in Swagger

        :param status: The status of this Agent.  # noqa: E501
        :type status: AgentStatus
        :param config_sum: The config_sum of this Agent.  # noqa: E501
        :type config_sum: str
        :param group: The group of this Agent.  # noqa: E501
        :type group: List[str]
        :param name: The name of this Agent.  # noqa: E501
        :type name: str
        :param merged_sum: The merged_sum of this Agent.  # noqa: E501
        :type merged_sum: str
        :param ip: The ip of this Agent.  # noqa: E501
        :type ip: str
        :param manager: The manager of this Agent.  # noqa: E501
        :type manager: str
        :param node_name: The node_name of this Agent.  # noqa: E501
        :type node_name: str
        :param date_add: The date_add of this Agent.  # noqa: E501
        :type date_add: str
        :param version: The version of this Agent.  # noqa: E501
        :type version: str
        :param last_keep_alive: The last_keep_alive of this Agent.  # noqa: E501
        :type last_keep_alive: str
        :param os: The os of this Agent.  # noqa: E501
        :type os: AgentOs
        :param id: The id of this Agent.  # noqa: E501
        :type id: str
        """
        self.swagger_types = {
            'status': AgentStatus,
            'config_sum': str,
            'group': List[str],
            'name': str,
            'merged_sum': str,
            'ip': str,
            'manager': str,
            'node_name': str,
            'date_add': str,
            'version': str,
            'last_keep_alive': str,
            'os': AgentOs,
            'id': str
        }

        self.attribute_map = {
            'status': 'status',
            'config_sum': 'configSum',
            'group': 'group',
            'name': 'name',
            'merged_sum': 'mergedSum',
            'ip': 'ip',
            'manager': 'manager',
            'node_name': 'node_name',
            'date_add': 'dateAdd',
            'version': 'version',
            'last_keep_alive': 'lastKeepAlive',
            'os': 'os',
            'id': 'id'
        }

        self._status = status
        self._config_sum = config_sum
        self._group = group
        self._name = name
        self._merged_sum = merged_sum
        self._ip = ip
        self._manager = manager
        self._node_name = node_name
        self._date_add = date_add
        self._version = version
        self._last_keep_alive = last_keep_alive
        self._os = os
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Agent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Agent of this Agent.  # noqa: E501
        :rtype: Agent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> AgentStatus:
        """Gets the status of this Agent.


        :return: The status of this Agent.
        :rtype: AgentStatus
        """
        return self._status

    @status.setter
    def status(self, status: AgentStatus):
        """Sets the status of this Agent.


        :param status: The status of this Agent.
        :type status: AgentStatus
        """

        self._status = status

    @property
    def config_sum(self) -> str:
        """Gets the config_sum of this Agent.


        :return: The config_sum of this Agent.
        :rtype: str
        """
        return self._config_sum

    @config_sum.setter
    def config_sum(self, config_sum: str):
        """Sets the config_sum of this Agent.


        :param config_sum: The config_sum of this Agent.
        :type config_sum: str
        """

        self._config_sum = config_sum

    @property
    def group(self) -> List[str]:
        """Gets the group of this Agent.


        :return: The group of this Agent.
        :rtype: List[str]
        """
        return self._group

    @group.setter
    def group(self, group: List[str]):
        """Sets the group of this Agent.


        :param group: The group of this Agent.
        :type group: List[str]
        """

        self._group = group

    @property
    def name(self) -> str:
        """Gets the name of this Agent.


        :return: The name of this Agent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Agent.


        :param name: The name of this Agent.
        :type name: str
        """

        self._name = name

    @property
    def merged_sum(self) -> str:
        """Gets the merged_sum of this Agent.


        :return: The merged_sum of this Agent.
        :rtype: str
        """
        return self._merged_sum

    @merged_sum.setter
    def merged_sum(self, merged_sum: str):
        """Sets the merged_sum of this Agent.


        :param merged_sum: The merged_sum of this Agent.
        :type merged_sum: str
        """

        self._merged_sum = merged_sum

    @property
    def ip(self) -> str:
        """Gets the ip of this Agent.


        :return: The ip of this Agent.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Agent.


        :param ip: The ip of this Agent.
        :type ip: str
        """

        self._ip = ip

    @property
    def manager(self) -> str:
        """Gets the manager of this Agent.


        :return: The manager of this Agent.
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager: str):
        """Sets the manager of this Agent.


        :param manager: The manager of this Agent.
        :type manager: str
        """

        self._manager = manager

    @property
    def node_name(self) -> str:
        """Gets the node_name of this Agent.


        :return: The node_name of this Agent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name: str):
        """Sets the node_name of this Agent.


        :param node_name: The node_name of this Agent.
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def date_add(self) -> str:
        """Gets the date_add of this Agent.


        :return: The date_add of this Agent.
        :rtype: str
        """
        return self._date_add

    @date_add.setter
    def date_add(self, date_add: str):
        """Sets the date_add of this Agent.


        :param date_add: The date_add of this Agent.
        :type date_add: str
        """

        self._date_add = date_add

    @property
    def version(self) -> str:
        """Gets the version of this Agent.


        :return: The version of this Agent.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Agent.


        :param version: The version of this Agent.
        :type version: str
        """

        self._version = version

    @property
    def last_keep_alive(self) -> str:
        """Gets the last_keep_alive of this Agent.


        :return: The last_keep_alive of this Agent.
        :rtype: str
        """
        return self._last_keep_alive

    @last_keep_alive.setter
    def last_keep_alive(self, last_keep_alive: str):
        """Sets the last_keep_alive of this Agent.


        :param last_keep_alive: The last_keep_alive of this Agent.
        :type last_keep_alive: str
        """

        self._last_keep_alive = last_keep_alive

    @property
    def os(self) -> AgentOs:
        """Gets the os of this Agent.


        :return: The os of this Agent.
        :rtype: AgentOs
        """
        return self._os

    @os.setter
    def os(self, os: AgentOs):
        """Sets the os of this Agent.


        :param os: The os of this Agent.
        :type os: AgentOs
        """

        self._os = os

    @property
    def id(self) -> str:
        """Gets the id of this Agent.


        :return: The id of this Agent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Agent.


        :param id: The id of this Agent.
        :type id: str
        """

        self._id = id
