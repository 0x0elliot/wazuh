<!--
   - Allowed fields:
   - location - where the log came from (only on FTS)
   - user     - extract the user name
   - dstuser  - the destination username (from su)
   - srcip    - source ip
   - dstip    - dst ip
   - srcport  - source port
   - dstport  - destination port
   - protocol - protocol
   - id       - event id 
   - url      - url of the event
   - action   - event action (deny, drop, accept, etc)
   - data     - Any extra data
  -->

<!-- Pam decoder.
  -  Will extract username and srcip whenever is possible.
  - Examples:
  - su(pam_unix)[23164]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=osaudit
  - su(pam_unix)[2298]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=root
  - vsftpd(pam_unix)[25073]: authentication failure; logname= uid=0 euid=0 tty= ruser= rhost=211.100.27.101
  - vsftpd(pam_unix)[25073]: check pass; user unknown
  - sshd(pam_unix)[16660]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=202.110.184.100  user=root
  - su(pam_unix)[14592]: session opened for user news by (uid=0)
  - su(pam_unix)[14592]: session closed for user news
  - sshd(pam_unix)[13025]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=210.70.129.207  user=nobody
  - sshd(pam_unix)[18987]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=languedoc-2-81-56-82-49.fbx.proxad.net  user=root
  - sshd(pam_unix)[17365]: session opened for user test by (uid=508)
  - sshd(pam_unix)[1345]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=222.237.79.237  user=root
  -->
<decoder name="pam">
  <prematch>^\w+(pam_unix)[\d+]: </prematch>
</decoder>

<decoder name="pam-host-user">
  <parent>pam</parent>
  <prematch offset="after_parent">rhost=\S+ user=\S+</prematch>
  <regex offset="after_parent">rhost=(\S+) user=(\S+)</regex>
  <order>srcip, user</order>
</decoder>

<decoder name="pam-user">
  <parent>pam</parent>
  <prematch offset="after_parent">^session opened </prematch>
  <regex offset="after_prematch">^for user (\S+) </regex>
  <order>user</order>
</decoder>  

  
<!-- SSH decoder.
  -  Will extract username and srcip from the logs.
  -  Only add to the FTS if the login was sucessfull
  -  If the login failed, just extract the username/srcip for correlation
  -  Examples:
  -  sshd[8813]: Accepted password for root from 192.168.10.1 port 1066 ssh2
  -  sshd[2404]: Accepted password for root from 192.168.11.1 port 2011 ssh2
  -  sshd[21405]: Accepted password for root from 192.1.1.1 port 6023 ssh2
  -  sshd[21487]: Failed password for root from 192.168.1.1 port 1045 ssh2
  -  sshd[8813]: Failed none for root from 192.168.10.161 port 1066 ssh2
  -  sshd[12675]: Failed password for invalid user lala11 from x.x.x.x ..
  -  sshd[12914]: Failed password for invalid user lala6 from ...
  -  "" Failed keyboard-interactive for root from 192.1.1.1 port 1066 ssh2    
  -  sshd[23857]: [ID 702911 auth.notice] User xxx, coming from zzzz,
  -  authenticated. 
  -  sshd[61834]: reverse mapping checking getaddrinfo for sv.tvcm.ch
  -  failed - POSSIBLE BREAKIN ATTEMPT!
  -  sshd[3251]: User root not allowed because listed in DenyUsers
  -->

<decoder name="sshd">
  <prematch>^sshd[\d+]: </prematch>
</decoder>

<decoder name="sshd-success">
  <parent>sshd</parent>
  <prematch offset="after_parent">^Accepted</prematch>
  <regex offset="after_prematch">^ \S+ for (\S+) from (\S+) port </regex>
  <order>user,srcip</order>
  <fts>name,user,location</fts>
  <ftscomment>First time this user logged in (using ssh)</ftscomment>
</decoder>

<decoder name="sshd-success-solaris">
  <parent>sshd</parent>
  <prematch offset="after_parent">^[ID \d+ \w+.\w+] User</prematch>
  <regex offset="after_prematch">^ (\S+), comming from (\S+), a</regex>
  <order>user,srcip</order>
  <fts>name,user,location</fts>
  <ftscomment>First time this user logged in (using ssh)</ftscomment>
</decoder>

<decoder name="ssh-failed">
  <parent>sshd</parent>
  <prematch offset="after_parent">^Failed</prematch>
  <regex offset="after_prematch">^ \S+ for i\w+ user (\S+) from (\S+) |</regex>
  <regex>^ \S+ for (\S+) from (\S+) port </regex>
  <order>user,srcip</order>
</decoder>

<decoder name="ssh-error">
  <parent>sshd</parent>
  <prematch offset="after_parent">^error: PAM: Authentication </prematch>
  <regex offset="after_prematch">^failure for (\S+) from (\S+)$</regex>
  <order>user,srcip</order>
</decoder>

<decoder name="ssh-reverse-mapping">
  <parent>sshd</parent>
  <prematch offset="after_parent">^reverse mapping checking</prematch>
  <regex offset="after_prematch">^\w+ \w+ for (\S+) failed - POSS</regex>
  <order>srcip</order>
</decoder>       

<decoder name="ssh-denied">
  <parent>sshd</parent>
  <prematch offset="after_parent">^User \S+ from </prematch>
  <regex offset="after_parent">^User (\S+) from (\S+) </regex>
  <order>user, srcip</order>
</decoder>

<decoder name="ssh-invalid-user">
  <parent>sshd</parent>
  <prematch offset="after_parent">^Invalid user</prematch>
  <regex offset="after_parent">^ (\S+) from (\S+)</regex>
  <order>user,srcip</order>
</decoder>

<decoder name="ssh-generic">
  <parent>sshd</parent>
  <regex offset="after_parent"> from (\S*\d+.\d+.\d+.\d\d*\d*)</regex>
  <order>srcip</order>
</decoder>


<!--
 - Telnet decoder
 - Will extract the srcip
 - Examples:
 - May 31 12:33:44 queen telnetd[9876]: warning: can't verify hostname: 
   gethostbyname(131.1.satis-tl.ru) failed
 - May 29 21:12:18 queen telnetd[6474]: refused connect from 81.215.42.27
 - Jun  1 23:02:07 queen telnetd[62948]: connect from external.example.net
 - Jun  1 23:02:07 queen telnetd[62948]: ttloop:  read: A connection with a remote socket was reset by that socket.
 - Jun  2 09:54:28 valhalla in.telnetd[19723]: [ID 927837 local2.info] connect from external.example.net
 - Jun  2 09:54:28 valhalla telnetd[19723]: [ID 485252 daemon.info] ttloop:  peer died: Error 0
 -->

<decoder name="telnetd">
  <prematch>^telnetd[\d+]: |^in.telnetd[\d+]: </prematch>
</decoder>

<decoder name="telnetd-ip">
  <parent>telnetd</parent>
  <regex offset="after_parent">from (\d+.\d+.\d+.\d+)</regex>
  <order>srcip</order>
</decoder>


<!--
 - Samba decoder.
 - Will extraxt the username/srcip
 - Examples:
 - smbd[832]: Denied connection from (192.168.3.23)
 - smbd[832]: Connection denied from 0.0.0.0
 - smbd[17535]: Permission denied\-\- user not allowed to delete, 
   pause, or resume print job. User name: ahmet. Printer name: prnq1.
  -->

<decoder name="smbd">
  <prematch>^smbd[\d+]: </prematch>
</decoder>

<decoder name="smbd-user">
  <parent>smbd</parent>
  <prematch offset="after_parent">User name:</prematch>
  <regex offset="after_prematch">^ (\S+).</regex>
  <order>user</order>
</decoder>

<decoder name="smbd-ip">
  <parent>smbd</parent>
  <regex offset="after_parent"> from \((\d+.\d+.\d+.\d+)\)</regex>
  <order>srcip</order>
</decoder>



<!-- Su decoder.
  -  Will extract the username.
  -  Examples:
  -  su[2921936]: failed: ttyq4 changing from ldap to root
  -  su[234]: BAD SU ger to fwmaster on /dev/ttyp0
  -  su(pam_unix)[23164]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=osaudit
  -  su(pam_unix)[2298]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=root
  -  Jul  5 12:17:38 lili su[2702]: - pts/5 ab-dc-root
  -  Jul  5 12:13:15 lili su[2614]: - pts/6 dcid-root
  -->
  
<decoder name="su">
  <prematch>^su(pam_unix)[\d+]:\s|^su[\d+]:\s|^su:\s</prematch>
  <regex>^su\Spam_unix\S[\d+]: authentication failure; logname=\S*\s</regex>
  <regex>uid=\d+ euid=\d+ tty=\S* ruser=(\S+) rhost=\S+ user=(\S+)$|</regex>
  <regex>^su\S*: BAD SU (\S+) to (\S+) on|</regex>
  <regex>^su[\d+]: failed: \S+ changing from (\S+) to (\S+)|</regex>
  <regex>^su[\d+]: - \S+ (\S+)-(\S+)$</regex>
  <order>user,dstuser</order>
  <fts>name,user,location</fts>
  <ftscomment>First time user attempted to use su</ftscomment>
</decoder>


<!-- Sudo decoder.
  -  Will extract the username
  -  Examples:
  -  Apr 27 15:22:23 niban sudo:     dcid : TTY=pts/4 ; PWD=/home/dcid ; USER=root ; COMMAND=/usr/bin/tail /var/log/snort/alert.fast
  -  Apr 27 15:25:08 niban sudo:     dcid : TTY=pts/4 ; PWD=/home/dcid ; USER=root ; COMMAND=/usr/bin/tail /var/log/snort/alert.fast
  -  Apr 14 10:59:01 enigma sudo:     dcid : TTY=ttyp3 ; PWD=/home/dcid/ossec-hids.0.1a/src/analysisd ; USER=root ; COMMAND=/bin/cp -pr ../../bin/addagent ../../bin/osaudit-logaudit ../../bin/ossec-execd ../../bin/ossec-logcollector ../../bin/ossec-maild ../../bin/ossec-remoted /var/ossec/bin
  -  Apr 19 14:52:02 enigma sudo:     dcid : TTY=ttyp3 ; PWD=/var/www/alex ; USER=root ; COMMAND=/sbin/chown dcid.dcid .
  -->
<decoder name="sudo">
  <prematch>^sudo:\s</prematch>
  <regex>^sudo:\s+(\S+)\s:</regex>
  <order>user</order>
  <fts>name,user,location</fts>
  <ftscomment>First time user executed the sudo command</ftscomment>
</decoder>  


<!-- ProFTPD decoder.
  - Will extract the username/srcip
  - Examples:
  - proftpd[26916]: hayaletgemi (85.101.218.135[85.101.218.135]) - ANON anonymous: Login successful.
  - proftpd[12564]: juf01 (pD9EE35B1.dip.t-dialin.net[217.238.53.177]) - USER jufu: Login successful
  - proftpd[30362] xx.yy.zz (aa.bb.cc[aa.bb.vv.dd]): USER backup: Login successful.
  - proftpd[2344]: refused connect from 192.168.1.2 (192.168.1.2)
  - proftpd[15181]: valhalla (crawl-66-249-66-80.googlebot.com[66.249.66.80]) - Connection from crawl-66-249-66-80.googlebot.com [66.249.66.80] denied.
  -->

<decoder name="proftpd">  
  <prematch>^proftpd[\d+]: </prematch>
</decoder>

<decoder name="proftpd-success">
  <parent>proftpd</parent>  
  <prematch>: Login successful</prematch>
  <regex>^proftpd[\d+]: \S+ \(\S+[(\d+.\d+.\d+.\d+)]\)\s*\S \w+ (\S+): </regex>
  <regex>Login successful</regex>
  <order>srcip,user</order>
  <fts>name,user,srcip,location</fts>
  <ftscomment>First time user logged in via FTP.</ftscomment>
</decoder>

<decoder name="proftpd-ip">
  <parent>proftpd</parent>
  <regex>^proftpd[\d+]: \S+ \(\S+[(\d+.\d+.\d+.\d+)]\)</regex>
  <order>srcip</order>
</decoder>


<!-- Pure-FTPd decoder.
  - Will extract the username/srcip whenever possible.
  - Samples by Peter Ahlert <peter@ifup.de> (thanks!)
  - Examples:
  - pure-ftpd-wrapper[926]: connect from 1.1.0.1 (1.1.0.1)
  - pure-ftpd: (?@1.1.0.1) [INFO] New connection from 1.1.0.1
  - pure-ftpd: (abcde@1.1.0.1) [INFO] Can't change directory to /.test: Permission denied
  - pure-ftpd: (abcde@1.1.0.1) [INFO] Logout.
  - pure-ftpd: (?@59.150.14.54) [WARNING] Authentication failed for user [newuser]
  -->
<decoder name="pure-ftpd">
  <prematch>^pure-ftpd</prematch>
</decoder>

<decoder name="pure-ftpd-login">
  <parent>pure-ftpd</parent>
  <prematch>[INFO] \S+ is now logged in</prematch>
  <regex>\(?@(\S+)\) [INFO] (\S+) is now logged in</regex>
  <order>srcip,user</order>
  <fts>name,user,srcip,location</fts>
  <ftscomment>First time user logged in via FTP</ftscomment>
</decoder>

<decoder name="pure-ftpd-generic">
  <parent>pure-ftpd</parent>
  <regex>: \((\S+)@(\S+)\) [</regex>
  <order>user,srcip</order>
</decoder>  


<!-- vsftpd decoder.
  - Will extract the srcip.
  - Examples:
  - Sun Jun  4 22:08:04 2006 [pid 21612] CONNECT: Client "192.168.2.10"
  - Sun Jun  4 22:08:39 2006 [pid 21611] [dcid] OK LOGIN: Client "192.168.2.10"
  - Sun Jun  4 22:09:22 2006 [pid 21622] CONNECT: Client "192.168.2.10"
  - Sun Jun  4 22:09:24 2006 [pid 21621] [lalal] FAIL LOGIN: Client "192.168.2.10"
  - Sat Jun  3 07:51:42 2006 [pid 25073] [Administrator] FAIL LOGIN: Client
  "211.100.27.101"
  -->
<decoder name="vsftpd">
  <prematch>^\w\w\w \w\w\w\s+\d+ \S+ \d+ [pid \d+] </prematch>
  <regex offset="after_prematch">Client "(\d+.\d+.\d+.\d+)"</regex>
  <order>srcip</order>
</decoder>


<!-- FTPD decoder (Solaris).
  - Examples:
  - ftpd[811166]: refused connect from 88.225.42.182
  - in.ftpd[18561]: [ID 484914 daemon.notice] gethostbyaddr: nameservices.net. != 216.117.134.168
  - ftpd[31918]: FTPD: EXPORT file local , remote
  -->
<decoder name="ftpd">
  <prematch>^ftpd[\d+]: |^in.ftpd[\d+]: </prematch>
</decoder>

<decoder name="ftpd-ip">
  <parent>ftpd</parent>
  <regex>FROM (\d+.\d+.\d+.\d+), |from (\d+.\d+.\d+.\d+)</regex>
  <order>srcip</order>
</decoder>

<!-- Arpwatch decoder.
  - Will extract srcip/mac for "new station" messages.
  - Examples:
  - arpwatch: new station 192.168.1.103 0:11:43:5e:5d:80 eth0
  - arpwatch: bogon 172.16.150.149 0:2:b3:d6:e5:68 eth0
  - arpwatch: new station 192.168.2.10 0:c0:4f:78:32:be
  -->
<decoder name="arpwatch">
  <prematch>^arpwatch: </prematch>
</decoder>

<decoder name="arpwatch-new">
  <parent>arpwatch</parent>
  <prematch offset="after_parent">^new station |^bogon </prematch>
  <regex offset="after_prematch">^(\d+.\d+.\d+.\d+) (\S+)</regex>
  <order>srcip, data</order>
  <fts>name, srcip, data</fts>
  <ftscomment>New host in the network.</ftscomment>
</decoder>


<!-- Imapd decoder.
  - Will extract the username/srcip
  - Examples:
  - imapd[26888]: Login failed user=babadosfashion auth=babadosfashion host=bahiana.resenet.com.br [200.255.5.8]
  - imapd[21040]: Login failed user=root domain=(null) auth=root host=host29-141.poo
    l8249.interbusiness.it [82.49.141.29]
  - imapd[27113]: Authenticated user=badyy host=a.resenet.com.br [1.2.3.4]
  - imapd[27113]: Logout user=badyy host=a.resenet.com.br [1.2.3.4]  
  -->
<decoder name="imapd">
  <prematch>^imapd[\d+]: </prematch>
  <regex offset="after_prematch">user=(\S+) \.+ [(\d+.\d+.\d+.\d+)]</regex>    
  <order>user,srcip</order>
</decoder>


<!-- Named decoder.
  - Will extract the srcip
  - Examples:
  -
 -->           
<decoder name="named">
  <prematch>^named[\d+]: </prematch>
  <regex offset="after_prematch"> from [(\d+.\d+.\d+.\d+)].</regex>
  <order>srcip</order>
</decoder>


<!-- Postfix  decoder.
  - Will extract the srcip
  - Examples: 
  - postfix/smtpd[32297]: NOQUEUE: reject: RCPT from unknown[213.255.237.245]: 554 
    <ce101@ce.metu.edu.tr>: Relay access denied; from=<kryonomm@yahoo.com> 
    to=<e10445@jubiipost.dk> proto=SMTP helo=<SM01.net>
 -->

<decoder name="postfix">
  <prematch>^postfix/\S+[\d+]: </prematch>
</decoder>

<decoder name="postfix-reject">
  <use_own_name>true</use_own_name>
  <parent>postfix</parent>  
  <prematch offset="after_parent">^NOQUEUE: reject: RCPT from </prematch>
  <regex offset="after_prematch">[(\d+.\d+.\d+.\d+)]: (\d+) </regex>
  <order>srcip,id</order>
</decoder>



<!-- Sendmail decoder.
  - Will extract the srcip
  - Examples: 
  - sendmail[15806618]: k1SN9pkK15806618: ruleset=check_mail, arg1=<rtreter@qffff.com>, 
  - relay=dsl.static81215198185.ttnet.net.tr [81.215.198.185] (may be forged), reject=553 5.1.8 
  - <rtreter@qffff.com>... Domain of sender address rtreter@qffff.com does not exist
  - sm-msp-queue[13484]: k5TKj6L5012934: to=root, ctladdr=root (0/0), delay=00:04:00, xdelay=00:00:00, mailer=relay, pri=120112, relay=[127.0.0.1], dsn=4.0.0, stat=Deferred: Connection refused by [127.0.0.1]
 -->
<decoder name="sendmail-reject">
  <prematch>^sendmail[\d+]: |^sm-mta[\d+]: |^sm-msp-queue[\d+]: </prematch>
  <regex offset="after_prematch">relay=\S+ [(\d+.\d+.\d+.\d+)]</regex>
  <order>srcip</order>
</decoder>  


<!-- Mail scanner
  - Will extract the srcip/action
  - Examples:
  - MailScanner[24112]: Message k7B9Mc6b015925 from 
  68.171.145.34 (nilsenator@hotmail.com) to yyyyy.no is spam, SpamAssassin
  - May  3 16:28:40 jarjar MailScanner[4732]: Message k436SX2M005191 from  
  111.222.111.222 (david@our.domain.org) to our.domain.org is spam
  , SpamAssassin
  - MailScanner[5317]: Message k436dCIW005370 from  
  111.222.111.222 (david@our.domain.org) to another.domain.org is not s
  pam, SpamAssassin
  - MailScanner[29107]: Message j0EMandY027564 from xxx.xxx.xxx.xxx(xxxxx@xxxxx.ie) to xxxxx.ie is not spam
  -->
<decoder name="mailscanner">
  <prematch>^MailScanner[\d+]: </prematch>
</decoder>

<decoder name="mailscanner-ip">
  <parent>mailscanner</parent>
  <prematch offset="after_parent">^Message \S+ from </prematch>
  <regex offset="after_prematch">^(\d+.\d+.\d+.\d+) \S+ to \S+ is (\w+)</regex>
  <order>srcip, action</order>
</decoder>


<!-- Iptables decoder.
  - Will extract the srcip, dstip, srcport, dstport, protocol
  - Examples:
  - kernel: FIREWALL_OUT IN= OUT=eth0
    SRC=192.168.6.57 DST=216.161.248.225 LEN=40 TOS=0x00 PREC=0x00 TTL=64
    ID=18547 DF PROTO=TCP SPT=46388 DPT=37628 WINDOW=6930 RES=0x00 ACK RST
    URGn=0
  - kernel: IPTABLE IN=eth0 OUT= MAC=ff:ff:ff:ff:ff:ff:00:03:93:db:2e:b4:08:00 
    SRC=10.4.11.40 DST=255.255.255.255 LEN=180 TOS=0x00 PREC=0x00 TTL=64 
    ID=4753 PROTO=UDP SPT=49320 DPT=2222 LEN=160
  - kernel: [4475569.016000] IN= OUT=lo SRC=192.168.2.11 DST=192.168.2.11 
    LEN=52 TOS=0x10 PREC=0x00 TTL=64 ID=49546 DF PROTO=TCP SPT=43068 
    DPT=22 WINDOW=8192 RES=0x00 ACK URGP=0     
  -->
<decoder name="iptables">
   <type>firewall</type>
   <prematch>^kernel: [\d+.\d+] \S+ IN=|^kernel: \S+ IN=</prematch>
   
   <regex offset="after_prematch"> SRC=(\S+) DST=(\S+) \.+ </regex>
   <regex>PROTO=(\w+) SPT=(\d+) DPT=(\d+) </regex>
   <order>action,srcip,dstip,protocol,srcport,dstport</order>
</decoder>
               

<!-- Solaris IPFilter decoder.
  - Will extract the action, srcip, srcport, dstip, dstport
  - Examples:
  - ipmon[11523]: [ID 702911 local0.warning] 09:30:39.300795 3x ce0 @0:1
    b 10.4.0.25,43873 -> 10.4.122.243,22 PR tcp len 20 100 -AP IN
  - ipmon[11523]: [ID 702911 local0.warning] 09:31:53.285032 hme0 @0:1
    b 10.4.122.243,138 -> 255.255.255.255,138 PR udp len 20 229 IN mbcast
  - ipmon[11523]: [ID 702911 local0.notice] 09:30:40.398290 ce0 @0:14
    p 10.4.122.243,123 -> 10.4.122.16,123 PR udp len 20 76 K-S OUT
  -->

<decoder name="ipfilter">
   <type>firewall</type>
   <prematch>^ipmon[\d+]: </prematch>
   <regex offset="after_prematch"> (\w) (\d+.\d+.\d+.\d+),(\d+) -> </regex>
   <regex>(\d+.\d+.\d+.\d+),(\d+) PR (\w+) </regex>
   <order>action,srcip,srcport,dstip,dstport,protocol</order>
</decoder>
  

<!-- AIX IPSec decoder.
  - Will extract the action,srcip,dstip,protocol,srcport,dstport
  - Examples:
  - ipsec_logd: #:3 R:p  I:10.0.0.99 S:10.0.0.82 D:10.0.0.99 
    P:tcp/ack SP:50349 DP:22 R:l I:en0 F:n T:0 L:88
  - ipsec_logd: #:1 R:p  O:10.0.0.99. S:10.0.0.99 D:10.0.0.25 
    P:udp SP:2063 DP:53 R:l I:en0 F:n T:0 L:81 
 -->

<decoder name="aix-ipsec">
   <type>firewall</type>
   <prematch>^ipsec_logd: </prematch>
   <regex> R:(\w)  \w:\S+ S:(\d+.\d+.\d+.\d+) </regex>
   <regex>D:(\d+.\d+.\d+.\d+) P:(\S+) SP:(\d+) DP:(\d+) </regex>
   <order>action,srcip,dstip,protocol,srcport,dstport</order>
</decoder>


<!-- Netscreen Firewall decoder.
  - Will extract the action,srcip,dstip,protocol,srcport,dstport
  - Examples:
  - Jan  1 10:02:11 [11.210.1.193.1.132] ns5gt: NetScreen device_id=ns5gt  [No Name]system-notification-00257(traffic): start_time="2006-01-01 10:09:38" duration=0 policy_id=310101 service=tcp/port:1526 proto=6 src zone=Null dst zone=self action=Deny sent=0 rcvd=38 src=10.1.2.3 dst=10.1.1.1 src_port=51350 dst_port=1426
  - <13>Mar 16 15:27:56 192.168.2.1 ns5gt: NetScreen device_id=ns5gt  [No Name]system-notification-00257(traffic): start_time=\"2004-03-16 16:31:22\" duration=0 policy_id=310001 service=tcp/port:120 proto=6 src zone=Null dst zone=self action=Deny sent=0 rcvd=60 src=10.1.1.1 dst=10.1.2.1 src_port=32047 dst_port=22
  - Jun  2 11:24:16 fire00 sav00: NetScreen device_id=sav00  [Root]system-critical-00436: Large ICMP packet! From 210.232.20.7 to 148.100.114.126, proto 1 (zone Untrust, int ethernet1/2). Occurred 1 times. (2006-06-02 11:24:16)
  -  NetScreen device_id=ns5gt [Root]system-critical-00027: Multiple login failures occurred for user netscreen from IP address 1.2.3.4:1567 (2004-10-07)
  -->
  
<decoder name="netscreenfw">
  <prematch>^\w+: NetScreen device_id</prematch>
</decoder>  

<decoder name="netscreenfw-traffic">
  <parent>netscreenfw</parent>
  <type>firewall</type>
  
  <prematch offset="after_parent">system-notification-00257</prematch>
  <prematch>\(traffic\): </prematch>
  
  <regex offset="after_prematch"> proto=(\w+) \.+action=(\w+) </regex>
  <regex>\.+src=(\S+) dst=(\S+) src_port=(\d+) dst_port=(\d+)</regex>
  <order>protocol, action, srcip, dstip, srcport, dstport</order>
</decoder>

<decoder name="netscreenfw-critical">
  <parent>netscreenfw</parent>
  <prematch offset="after_parent">system-critical-\.+ from </prematch>
  
  <regex offset="after_parent">system-(\w+)-(\d+): \.+ </regex>
  <regex>from\.+(\d+.\d+.\d+.\d+) </regex>
  <order>action, id, srcip</order>
</decoder>

<decoder name="netscreenfw-admin">
  <parent>netscreenfw</parent>
  <regex offset="after_parent">]system-(\w+)-(\d+):</regex>
  <order>action, id</order>  
</decoder>


<!-- Pix decoder.
  - Will extract the srcip, srcport, dstip and dstport whenever possible.
  - Examples:
  - %PIX-6-106015: Deny TCP (no connection) from 161.58.238.151/110 to a.b.c.d/3782 flags RST ACK
  - %PIX-2-106001: Inbound TCP connection denied from 165.139.46.7/3854 to 165.189.27.70/139 flags
  - %PIX-3-710003: TCP access denied by ACL from 216.39.220.130/54065 to outside:62.192.113.98/ssh
  - %PIX-7-710001: TCP access requested from X.X.X.X/1292 to outside:Y.Y.Y.Y/ssh
  - %PIX-7-710002: UDP access permitted from 33.33.33.4/943 to inside:33.33.33.15/snmp
  - %PIX-7-710005: UDP request discarded from <public IP of 525>/4500 to outside:192.168.69.137/4500
  - %PIX-2-106002   protocol Connection denied by outbound list acl_ID src inside_address dest outside_address
  - %PIX-2-106002: udp connection denied by outbound list 30 src 216.53.120.62 138 dest 169.132.10.82 138
  -  %PIX-4-106023: Deny tcp src inside:111.11.11.1/2143 dst YYY:172.11.1.11/139 by access-group "inside_inbound"
  - %PIX-4-400013 IDS:2003 ICMP redirect from 10.4.1.2 to 10.2.1.1 on interface dmz
  -->
<decoder name="pix">
  <prematch>^%PIX-|^\w\w\w \d\d \d\d\d\d \d\d:\d\d:\d\d: %PIX-</prematch>
</decoder>

<decoder name="pix-fw1">
  <parent>pix</parent>
  <type>firewall</type>
  <prematch offset="after_parent">^2-106001|^6-106015</prematch>
  <regex offset="after_parent">^(\S+): \w+ (\w+) \S+ (\S+) from </regex>
  <regex>(\S+)/(\S+) to (\S+)/(\S+)</regex>
  <order>id, protocol, action, srcip, srcport, dstip, dstport</order>
</decoder>

<decoder name="pix-fw2">
  <parent>pix</parent>
  <type>firewall</type>
  <prematch offset="after_parent">^3-710003|^7-710002|^7-710005</prematch>
  <regex offset="after_parent">^(\S+): (\S+) \w+ (\w+)\.+from </regex>
  <regex>(\S+)/(\S+) to \w+:(\S+)(\S+)</regex>
  <order>id, protocol, action, srcip, srcport, dstip, dstport</order>
</decoder>

<decoder name="pix-fw3">
  <parent>pix</parent>
  <type>firewall</type>
  <prematch offset="after_parent">^4-106023</prematch>
  <regex offset="after_parent">^(\S+): (\w+) (\w+) src \w+:</regex>
  <regex>(\S+)/(\S+) dst \w+:(\S+)(\S+)</regex>
  <order>id, action, protocol, srcip, srcport, dstip, dstport</order>
</decoder>

<decoder name="pix-fw4">
  <parent>pix</parent>
  <type>firewall</type>
  <prematch offset="after_parent">^4-106019</prematch>
  <regex offset="after_parent">^(\S+): IP packet from (\S+) to </regex>
  <regex>(\S+), protocol (\w+) (\w+) </regex>
  <order>id, srcip, dstip, protocol, action</order>
</decoder>

<decoder name="pix-attacks">
  <parent>pix</parent>
  <prematch offset="after_parent">^2-106012: |^2-106017: |</prematch>
  <prematch>^2-106020|^1-106021|^1-106022|</prematch>
  <prematch>^4-4000</prematch>
  <regex offset="after_parent">^(\S+): \.+ (\d+.\d+.\d+.\d+) </regex>
  <order>id, srcip</order>
</decoder>

<decoder name="pix-srcip">
  <parent>pix</parent>
  <prematch offset="after_parent">^6-605004|^6-308001</prematch>
  <regex offset="after_parent">^(\S+): \.+ (\d+.\d+.\d+.\d+)</regex>
  <order>id, srcip</order>
</decoder>

<decoder name="pix-generic">
  <parent>pix</parent>
  <regex offset="after_parent">^(\S+): </regex>
  <order>id</order>
</decoder>


<!-- Snort decoder.
  - Will extract the id, srcip and dstip
  - Examples:
  - snort: [1:469:3] ICMP PING NMAP [Classification: Attempted Information 
    Leak] [Priority: 2]: {ICMP} 10.4.12.26 -> 10.4.10.231
  - snort: [1:1420:11] SNMP trap tcp [Classification: Attempted Information 
    Leak] [Priority: 2]: {TCP} 10.4.12.26:37020 -> 10.4.10.231:162
  - [**] [1:1054:7] WEB-MISC weblogic/tomcat .jsp view source attempt [**]
    [Classification: Web Application Attack]
    [Priority: 1]  10.4.12.26:34041 -> 66.179.53.37:80
  - [**] [1:1421:11] SNMP AgentX/tcp request [**]
    [Classification: Attempted Information Leak] [Priority: 2]
    10.4.3.20:626 -> 10.4.10.161:705              
  - [**] [1:1882:10] ATTACK-RESPONSES id check returned userid [**]
    [Classification: Potentially Bad Traffic] [Priority: 2]
    {UDP} 192.168.20.32 -> 192.168.20.2  
  -->
<decoder name="snort">
   <type>ids</type>
   <prematch>^snort: [\d+:\d+:\d+] |^snort[\d+]: [\d+:\d+:\d+] |</prematch>
   <prematch>^[**] [\d+:\d+:\d+] </prematch>
   <regex>^\S+ [(\d+:\d+:\d+)] \.+ (\d+.\d+.\d+.\d+)\p*\d* -> </regex>
   <regex>(\d+.\d+.\d+.\d+)</regex>
   <order>id,srcip,dstip</order>
   <fts>name,id,srcip,dstip</fts>
   <ftscomment>First time Snort rule fired</ftscomment>
</decoder>

   
   
<!-- Horde decoder
  - Will extract: username and srcip.
  - Examples:
  - [notice] [imp] Login success for raphaelv@xx [100.121.170.41] to {a.b.c:143} [on line 92 of "/home/webmail/horde/imp/redirect.php"]
  - [error] [imp] FAILED LOGIN 210.179.154.213 to xxx:143[imap] as mala1
  -->
<decoder name="horde_imp">
  <prematch>^[\w+] [imp] </prematch>
</decoder>  

<decoder name="horde_imp_success">
  <parent>horde_imp</parent>
  <prematch offset="after_parent">^Login success </prematch>
  <regex offset="after_prematch">^for (\S+) [(\d+.\d+.\d+.\d+)] </regex>
  <order>user, srcip</order>
</decoder>

<decoder name="horde_imp_failed">
  <parent>horde_imp</parent>
  <prematch offset="after_parent">^FAILED LOGIN</prematch>
  <regex offset="after_prematch">^ (\d+.\d+.\d+.\d+) to \S+ as (\S+) </regex>
  <order>srcip, user</order> 
</decoder>



<!-- Apache decoder.
  - Will extract the srcip
  - Examples:
  - [error] [client 80.230.208.105] Directory index forbidden by rule: /home/
  - [error] [client 64.94.163.159] Client sent malformed Host header
  - [error] [client 66.31.142.16] File does not exist: /var/www/html/default.ida
  - [notice] Apache configured  
  - httpd[18660]: [error] [client 12.34.56.78] File does not exist: /usr/local/htdocs/cache
  - httpd[23745]: [error] [client 12.34.56.78] PHP Notice:
  -->
<decoder name="apache-syslog">
  <type>web-log</type>
  <prematch>^httpd[\d+]: </prematch>
  <regex offset="after_prematch">^[\w+] [client (\d+.\d+.\d+.\d+)] </regex>
  <order>srcip</order>
</decoder> 
 
<decoder name="apache-errorlog">
  <type>web-log</type>
  <prematch>^[warn] |^[notice] |^[error] </prematch>
</decoder>  

<decoder name="apache-errorlog-ip">
  <type>web-log</type>
  <parent>apache-errorlog</parent>
  
  <prematch offset="after_parent">^[client</prematch>
  <regex offset="after_prematch">^ (\d+.\d+.\d+.\d+)] </regex>
  <order>srcip</order>
</decoder> 



<!-- NCSA common log decoder (used by apache and IIS NCSA).
  -  Will extract the srcip, url and id.
  -  Every web access log must use "web-accesslog" as their
  -  name if they want to be matched against the web rules.
  - Examples:
  -  63.91.167.39 - - [03/Aug/2001:21:56:18 -0700] "GET /default.ida?NNNN
  -  206.78.62.16 - - [06/Aug/2001:08:57:08 -0700] "GET /default.ida?XX
  -  5.211.112.6 - - [04/Feb/2003:16:17:30 -0500] "GET /mod_ssl:error: 
  -  192.168.2.190 - - [18/Jan/2006:13:10:06 -0500] "GET /xxx.html HTTP/1.1"
     200 1732
  -  1.1.1.1 - username [18/Jan/2006:13:10:06 -0500] "GET /xxx.html HTTP/1.1"   
  -->
<decoder name="web-accesslog">
  <type>web-log</type>
  <prematch>^\d+.\d+.\d+.\d+ - </prematch>
  <regex>^(\d+.\d+.\d+.\d+) - \S+ [\S+ -\d+] </regex>
  <regex>"\w+ (\S+) HTTP\S+ (\d+) </regex>
  <order>srcip,url,id</order>
</decoder>

<!-- IIS specific log format.
  - #Fields: date time c-ip cs-username s-sitename s-computername s-ip s-port cs-method cs-uri-stem cs-uri-query sc-status cs-host cs(User-Agent) cs(Referer)
  - Examples:
  - 2006-07-23 04:40:02 1.2.3.4 - W3SVC3 CIN1WEB03 1.2.3.4 443 GET /Default.asp - 200 hiden.com Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.1;+Avant+Browser;+Avant+Browser;+.NET+CLR+1.1.4322;+.NET+CLR+2.0.50727) -
  -->
<decoder name="web-accesslog-iis">
  <type>web-log</type>
  <prematch>^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d </prematch>
  <regex offset="after_prematch">^(\d+.\d+.\d+.\d+) \S+ \S+ \S+ \S+ </regex>
  <regex>\d+ \S+ (\S+ \S+) (\d+) </regex>
  <order>srcip,url,id</order>
</decoder>
        

<!-- Racoon VPN.
  - Extract id (error or info) and ip address whenever possible.
  - 2006-08-08 01:42:09: ERROR: couldn't find the pskey for 222.155.15.88.
  - 
  -->
<decoder name="racoon">
  <prematch>^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d: </prematch>
</decoder>

<decoder name="racoon-failed">
  <parent>racoon</parent>
  <use_own_name>true</use_own_name>
    
  <prematch offset="after_parent">^ERROR: couldn't find the pskey </prematch>
  <regex offset="after_prematch">^for (\d+.\d+.\d+.\d+)</regex>
  <order>srcip</order>
</decoder>

<decoder name="racoon-action">
  <parent>racoon</parent>
  <regex offset="after_parent">^(\w+): </regex>
  <order>action</order>
</decoder>
            

<!-- Squid access log decoder.
  - Will extract the srcip.
  - Author: Ahmet Ozturk
  - Examples:
  - 1140701044.525   1231 192.168.1.201 TCP_DENIED/400 1536
    GET ahmet - NONE/- text/html
  - 1140701230.827    781 192.168.1.210 TCP_DENIED/407 1785
    GET http://www.ossec.net oahmet NONE/- text/html
  -->
<decoder name="squid-accesslog">
  <type>squid</type>
  <prematch>^\d+ \d+.\d+.\d+.\d+ </prematch>
  <regex>^\d+ (\d+.\d+.\d+.\d+) (\w+)/(\d+) \d+ \w+ (\S+) </regex>
  <order>srcip,action,id,url</order>
</decoder>  


<!-- Windows decoder
  - Will extract url (as win source),action (as win category) and id.
  - Examples:
  - WinEvtLog: Application: INFORMATION(0x00000064): ESENT: 
    (no user)(no domain): 
  - WinEvtLog: Security: AUDIT_FAILURE(0x000002A9): Security: 
    SYSTEM: NT AUTHORITY: The logon to account: xyz    by: 
    MICROSOFT_AUTHENTICATION_PACKAGE_V1_0    from workstation: la    failed. 
    The error code was: 3221225572
  - WinEvtLog: Security: AUDIT_FAILURE(0x00000211): Security: 
    SYSTEM: NT AUTHORITY: Logon Failure:      Reason:     Unknown user 
    name or bad password       User Name:  ab      Domain:     cd      
    Logon Type: 2       Logon Process:  User32          Authentication 
    Package: Negotiate       Workstation Name:   ad
  -->
<decoder name="windows">
  <type>windows</type>
  <prematch>^WinEvtLog: </prematch>
  <regex>^WinEvtLog: (\w+): (\w+)\((\d+)\): \w+: (\w+):</regex>
  <order>data,action,id,user</order>
</decoder>    


<!-- EOF -->
