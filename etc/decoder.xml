<!--
   - Allowed fields:
   - location - where the log came from (only on FTS)
   - user     - extract the user name
   - dstuser  - the destination username (from su)
   - srcip    - source ip
   - dstip    - dst ip
   - srcport  - source port
   - dstport  - destination port
   - protocol - protocol
   - id       - event id 
   - action   - event action (deny, drop, accept, etc)
  -->

<!-- SSH decoder.
  -  Will extract username and srcip from the logs.
  -  Only add to the FTS if the login was sucessfull
  -  If the login failed, just extract the username/srcip for correlation
  -  Examples:
  -  sshd[8813]: Accepted password for root from 192.168.10.1 port 1066 ssh2
  -  sshd[2404]: Accepted password for root from 192.168.11.1 port 2011 ssh2
  -  sshd[21405]: Accepted password for root from 192.1.1.1 port 6023 ssh2
  -  sshd[21487]: Failed password for root from 192.168.1.1 port 1045 ssh2
  -  sshd[8813]: Failed none for root from 192.168.10.161 port 1066 ssh2
  -  sshd[12675]: Failed password for invalid user lala11 from x.x.x.x ..
  -  sshd[12914]: Failed password for invalid user lala6 from ...
  -  "" Failed keyboard-interactive for root from 192.1.1.1 port 1066 ssh2    
  -  sshd[23857]: [ID 702911 auth.notice] User xxx, coming from zzzz,
  -  authenticated. 
  -  sshd[61834]: reverse mapping checking getaddrinfo for sv.tvcm.ch
  -  failed - POSSIBLE BREAKIN ATTEMPT!
  -->

<decoder name="sshd">
  <prematch>^sshd[\d+]: </prematch>
</decoder>

<decoder name="sshd-success">
  <parent>sshd</parent>
  <prematch>^sshd[\d+]: Accepted</prematch>
  <regex>^sshd[\d+]: Accepted \S+ for (\S+) from (\S+) port </regex>
  <order>user,srcip</order>
  <fts>name,user,location</fts>
  <ftscomment>First time this user logged in (using ssh)</ftscomment>
</decoder>

<decoder name="sshd-success-solaris">
  <parent>sshd</parent>
  <prematch>^sshd[\d+]: [ID \d+ \w+.\w+] User</prematch>
  <regex>^sshd[\d+]: [ID \d+ \w+.\w+] User (\S+), comming from (\S+), a</regex>
  <order>user,srcip</order>
  <fts>name,user,location</fts>
  <ftscomment>First time this user logged in (using ssh)</ftscomment>
</decoder>

<decoder name="ssh-failed">
  <parent>sshd</parent>
  <prematch>^sshd[\d+]: Failed</prematch>
  <regex>^sshd[\d+]: Failed \S+ for i\w+ user (\S+) from (\S+) port |</regex>
  <regex>^sshd[\d+]: Failed \S+ for (\S+) from (\S+) port </regex>
  <order>user,srcip</order>
</decoder>

<decoder name="ssh-error">
  <parent>sshd</parent>
  <prematch>^sshd[\d+]: error:</prematch>
  <regex>^sshd[\d+]: error: PAM: Authentication failure for (\S+) from (\S+)$</regex>
  <order>user,srcip</order>
</decoder>

<decoder name="ssh-reverse-mapping">
  <parent>sshd</parent>
  <prematch>^sshd[\d+]: reverse mapping checking</prematch>
  <regex>^sshd[\d+]: reverse mapping \w+ \w+ for (\S+) failed - POSS</regex>
  <order>srcip</order>
</decoder>       

<decoder name="ssh-generic">
  <parent>sshd</parent>
  <regex> from (\S*\d+.\d+.\d+.\d\d*\d*)</regex>
  <order>srcip</order>
</decoder>


<!-- Su decoder.
  -  Will extract the username.
  -  Examples:
  -  su[2921936]: failed: ttyq4 changing from ldap to root
  -  su[234]: BAD SU ger to fwmaster on /dev/ttyp0
  -  su(pam_unix)[23164]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=osaudit
  -  su(pam_unix)[2298]: authentication failure; logname= uid=1342 euid=0 tty= ruser=dcid rhost=  user=root
  -  Jul  5 12:17:38 lili su[2702]: - pts/5 ab-dc-root
  -  Jul  5 12:13:15 lili su[2614]: - pts/6 dcid-root
  -->
  
<decoder name="su">
  <prematch>^su(pam_unix)[\d+]:\s|^su[\d+]:\s|^su:\s</prematch>
  <regex>^su\Spam_unix\S[\d+]: authentication failure; logname=\S*\s</regex>
  <regex>uid=\d+ euid=\d+ tty=\S* ruser=(\S+) rhost=\S+ user=(\S+)$|</regex>
  <regex>^su\S*: BAD SU (\S+) to (\S+) on|</regex>
  <regex>^su[\d+]: failed: \S+ changing from (\S+) to (\S+)|</regex>
  <regex>^su[\d+]: - \S+ (\S+)-(\S+)$</regex>
  <order>user,dstuser</order>
  <fts>name,user,location</fts>
  <ftscomment>First time user attempted to use su</ftscomment>
</decoder>


<!-- Sudo decoder.
  -  Will extract the username
  -  Examples:
  -  Apr 27 15:22:23 niban sudo:     dcid : TTY=pts/4 ; PWD=/home/dcid ; USER=root ; COMMAND=/usr/bin/tail /var/log/snort/alert.fast
  -  Apr 27 15:25:08 niban sudo:     dcid : TTY=pts/4 ; PWD=/home/dcid ; USER=root ; COMMAND=/usr/bin/tail /var/log/snort/alert.fast
  -  Apr 14 10:59:01 enigma sudo:     dcid : TTY=ttyp3 ; PWD=/home/dcid/ossec-hids.0.1a/src/analysisd ; USER=root ; COMMAND=/bin/cp -pr ../../bin/addagent ../../bin/osaudit-logaudit ../../bin/ossec-execd ../../bin/ossec-logcollector ../../bin/ossec-maild ../../bin/ossec-remoted /var/ossec/bin
  -  Apr 19 14:52:02 enigma sudo:     dcid : TTY=ttyp3 ; PWD=/var/www/alex ; USER=root ; COMMAND=/sbin/chown dcid.dcid .
  -->
<decoder name="sudo">
  <prematch>^sudo:\s</prematch>
  <regex>^sudo:\s+(\S+)\s:</regex>
  <order>user</order>
  <fts>name,user,location</fts>
  <ftscomment>First time user executed the sudo command</ftscomment>
</decoder>  


<!-- ProFTPD decoder.
  - Will extract the username/srcip
  - Examples:
  - proftpd[12564]: juf01 (pD9EE35B1.dip.t-dialin.net[217.238.53.177]) - USER jufu: Login successful
  - proftpd[30362] xx.yy.zz (aa.bb.cc[aa.bb.vv.dd]): USER backup: Login successful.
  -->

<decoder name="proftpd">  
  <prematch>^proftpd[\d+]: </prematch>
</decoder>

<decoder name="proftpd-success">
  <parent>proftpd</parent>  
  <prematch>^proftpd[\d+]: \S+ \(\S+[\d+.\d+.\d+.\d+]\)\s*\S USER</prematch>
  <regex>^proftpd[\d+]: \S+ \(\S+[\d+.\d+.\d+.\d+]\)\s*\S USER (\S+): </regex>
  <regex>Login successful</regex>
  <order>srcip,user</order>
  <fts>name,user,srcip,location</fts>
  <ftscomment>First time user logged in via FTP</ftscomment>
</decoder>

<decoder name="proftpd-ip">
  <parent>proftpd</parent>
  <regex> from (\S+) </regex>
  <order>srcip</order>
</decoder>


<!-- Pure-FTPd decoder.
  - Will extract the username/srcip whenever possible.
  - Samples by Peter Ahlert <peter@ifup.de> (thanks!)
  - Examples:
  - pure-ftpd-wrapper[926]: connect from 1.1.0.1 (1.1.0.1)
  - pure-ftpd: (?@1.1.0.1) [INFO] New connection from 1.1.0.1
  - pure-ftpd: (abcde@1.1.0.1) [INFO] Can't change directory to /.test: Permission denied
  - pure-ftpd: (abcde@1.1.0.1) [INFO] Logout.
  - pure-ftpd: (?@59.150.14.54) [WARNING] Authentication failed for user [newuser]
  -->
<decoder name="pure-ftpd">
  <prematch>^pure-ftpd</prematch>
</decoder>

<decoder name="pure-ftpd-login">
  <parent>pure-ftpd</parent>
  <prematch>[INFO] \S+ is now logged in</prematch>
  <regex>\(?@(\S+)\) [INFO] (\S+) is now logged in</regex>
  <order>srcip,user</order>
  <fts>name,user,srcip,location</fts>
  <ftscomment>First time user logged in via FTP</ftscomment>
</decoder>

<decoder name="pure-ftpd-generic">
  <parent>pure-ftpd</parent>
  <regex>: \((\S+)@(\S+)\) [</regex>
  <order>user,srcip</order>
</decoder>  


<!-- Imapd decoder.
  - Will extract the username/srcip
  - Examples:
  - imapd[26888]: Login failed user=babadosfashion auth=babadosfashion host=bahiana.resenet.com.br [200.255.5.8]
  - imapd[21040]: Login failed user=root domain=(null) auth=root host=host29-141.poo
    l8249.interbusiness.it [82.49.141.29]
  -->
<decoder name="imapd-login-failed">
  <prematch>^imapd[\d+]: login failed</prematch>
  <regex>^imapd[\d+]: login failed user=(\S+) auth=\S* host=(\S+) </regex>
  <order>user,srcip</order>
</decoder>



<!-- Named decoder.
  - Will extract the srcip
  - Examples:
  -
 -->           
<decoder name="named">
  <prematch>^named[\d+]: </prematch>
  <regex> from [(\d+.\d+.\d+.\d+)].</regex>
  <order>srcip</order>
</decoder>


<!-- Postfix  decoder.
  - Will extract the srcip
  - Examples: 
  - postfix/smtpd[32297]: NOQUEUE: reject: RCPT from unknown[213.255.237.245]: 554 
    <ce101@ce.metu.edu.tr>: Relay access denied; from=<kryonomm@yahoo.com> 
    to=<e10445@jubiipost.dk> proto=SMTP helo=<SM01.net>
 -->

<decoder name="postfix-reject">
  <prematch>^postfix/\w+[\d+]: </prematch>
  <regex>NOQUEUE: reject: RCPT from \S+[(\d+.\d+.\d+.\d+)]:</regex>
  <order>srcip</order>
</decoder>



<!-- Sendmail decoder.
  - Will extract the srcip
  - Examples: 
  - sendmail[15806618]: k1SN9pkK15806618: ruleset=check_mail, arg1=<rtreter@qffff.com>, 
  - relay=dsl.static81215198185.ttnet.net.tr [81.215.198.185] (may be forged), reject=553 5.1.8 
  - <rtreter@qffff.com>... Domain of sender address rtreter@qffff.com does not exist
 -->

<decoder name="sendmail-reject">
  <prematch>^sendmail[\d+]: </prematch>
  <regex>relay=\S+ [(\d+.\d+.\d+.\d+)] </regex>
  <order>srcip</order>
</decoder>  


<!-- Iptables decoder.
  - Will extract the srcip, dstip, srcport, dstport, protocol
  - Examples:
  - kernel: FIREWALL_OUT IN= OUT=eth0
    SRC=192.168.6.57 DST=216.161.248.225 LEN=40 TOS=0x00 PREC=0x00 TTL=64
    ID=18547 DF PROTO=TCP SPT=46388 DPT=37628 WINDOW=6930 RES=0x00 ACK RST
    URGn=0
  - kernel: IPTABLE IN=eth0 OUT= MAC=ff:ff:ff:ff:ff:ff:00:03:93:db:2e:b4:08:00 
    SRC=10.4.11.40 DST=255.255.255.255 LEN=180 TOS=0x00 PREC=0x00 TTL=64 
    ID=4753 PROTO=UDP SPT=49320 DPT=2222 LEN=160
  - kernel: [4475569.016000] IN= OUT=lo SRC=192.168.2.11 DST=192.168.2.11 
    LEN=52 TOS=0x10 PREC=0x00 TTL=64 ID=49546 DF PROTO=TCP SPT=43068 
    DPT=22 WINDOW=8192 RES=0x00 ACK URGP=0     
  -->
        
<decoder name="iptables">
   <type>firewall</type>
   <prematch>^kernel: [\d+.\d+] \S+ IN=</prematch>
   <regex>^kernel: [\d+.\d+] (\S+) \.+ SRC=(\S+) DST=(\S+) \.+ </regex>
   <regex>PROTO=(\w+) SPT=(\d+) DPT=(\d+) </regex>
   <order>action,srcip,dstip,protocol,srcport,dstport</order>
</decoder>

<decoder name="iptables">
   <type>firewall</type>
   <prematch>^kernel: \S+ IN=\S* OUT=</prematch>
   <regex>^kernel: (\S+) \.+ SRC=(\S+) DST=(\S+) \.+ PROTO=(\w+) </regex>
   <regex>SPT=(\d+) DPT=(\d+) </regex>
   <order>action,srcip,dstip,protocol,srcport,dstport</order>
</decoder>
               

<!-- Solaris IPFilter decoder.
  - Will extract the action, srcip, srcport, dstip, dstport
  - Examples:
  - ipmon[11523]: [ID 702911 local0.warning] 09:30:39.300795 3x ce0 @0:1
    b 10.4.0.25,43873 -> 10.4.122.243,22 PR tcp len 20 100 -AP IN
  - ipmon[11523]: [ID 702911 local0.warning] 09:31:53.285032 hme0 @0:1
    b 10.4.122.243,138 -> 255.255.255.255,138 PR udp len 20 229 IN mbcast
  - ipmon[11523]: [ID 702911 local0.notice] 09:30:40.398290 ce0 @0:14
    p 10.4.122.243,123 -> 10.4.122.16,123 PR udp len 20 76 K-S OUT
  -->

<decoder name="ipfilter">
   <type>firewall</type>
   <prematch>^ipmon[\d+]: </prematch>
   <regex> (\w) (\d+.\d+.\d+.\d+),(\d+) -> </regex>
   <regex>(\d+.\d+.\d+.\d+),(\d+) PR (\w+) </regex>
   <order>action,srcip,srcport,dstip,dstport,protocol</order>
</decoder>
  

<!-- AIX IPSec decoder.
  - Will extract the action,srcip,dstip,protocol,srcport,dstport
  - Examples:
  - ipsec_logd: #:3 R:p  I:10.0.0.99 S:10.0.0.82 D:10.0.0.99 
    P:tcp/ack SP:50349 DP:22 R:l I:en0 F:n T:0 L:88
  - ipsec_logd: #:1 R:p  O:10.0.0.99. S:10.0.0.99 D:10.0.0.25 
    P:udp SP:2063 DP:53 R:l I:en0 F:n T:0 L:81 
 -->

<decoder name="aix-ipsec">
   <type>firewall</type>
   <prematch>^ipsec_logd: </prematch>
   <regex> R:(\w)  \w:\S+ S:(\d+.\d+.\d+.\d+) </regex>
   <regex>D:(\d+.\d+.\d+.\d+) P:(\S+) SP:(\d+) DP:(\d+) </regex>
   <order>action,srcip,dstip,protocol,srcport,dstport</order>
</decoder>


<!-- Snort decoder.
  - Will extract the id, srcip and dstip
  - Examples:
  - snort: [1:469:3] ICMP PING NMAP [Classification: Attempted Information 
    Leak] [Priority: 2]: {ICMP} 10.4.12.26 -> 10.4.10.231
  - snort: [1:1420:11] SNMP trap tcp [Classification: Attempted Information 
    Leak] [Priority: 2]: {TCP} 10.4.12.26:37020 -> 10.4.10.231:162
  - [**] [1:1054:7] WEB-MISC weblogic/tomcat .jsp view source attempt [**]
    [Classification: Web Application Attack]
    [Priority: 1]  10.4.12.26:34041 -> 66.179.53.37:80
  - [**] [1:1421:11] SNMP AgentX/tcp request [**]
    [Classification: Attempted Information Leak] [Priority: 2]
    10.4.3.20:626 -> 10.4.10.161:705              
  - [**] [1:1882:10] ATTACK-RESPONSES id check returned userid [**]
    [Classification: Potentially Bad Traffic] [Priority: 2]
    {UDP} 192.168.20.32 -> 192.168.20.2  
  -->
<decoder name="snort">
   <type>ids</type>
   <prematch>^snort: [\d+:\d+:\d+] |^snort[\d+]: [\d+:\d+:\d+] |^[**] [\d+:\d+:\d+] </prematch>
   <regex>^\S+ [(\d+:\d+:\d+)] \.+ (\d+.\d+.\d+.\d+)\p*\d* -> (\d+.\d+.\d+.\d+)\p*</regex>
   <order>id,srcip,dstip</order>
   <fts>name,id,srcip,dstip</fts>
   <ftscomment>First time Snort rule fired</ftscomment>
</decoder>
   

<!-- Apache decoder.
  - Will extract the srcip
  - Examples:
  - [error] [client 80.230.208.105] Directory index forbidden by rule: /home/
  - [error] [client 64.94.163.159] Client sent malformed Host header
  - [error] [client 66.31.142.16] File does not exist: /var/www/html/default.ida
  - [notice] Apache configured  
  -->
<decoder name="apache-errorlog">
  <type>web-log</type>
  <prematch>^[\w+] [client</prematch>
  <regex>^[\w+] [client (\d+.\d+.\d+.\d+)] </regex>
  <order>srcip</order>
</decoder> 

<decoder name="apache-errorlog">
  <type>web-log</type>
  <prematch>^[warn] |^[notice] |^[error] </prematch>
</decoder> 


<!-- NCSA common log decoder (used by apache and IIS NCSA).
  -  Will extract the srcip, url and id.
  -  Every web access log must use "web-accesslog" as their
  -  name if they want to be matched against the web rules.
  - Examples:
  -  63.91.167.39 - - [03/Aug/2001:21:56:18 -0700] "GET /default.ida?NNNN
  -  206.78.62.16 - - [06/Aug/2001:08:57:08 -0700] "GET /default.ida?XX
  -  5.211.112.6 - - [04/Feb/2003:16:17:30 -0500] "GET /mod_ssl:error: 
  -  192.168.2.190 - - [18/Jan/2006:13:10:06 -0500] "GET /xxx.html HTTP/1.1"
     200 1732
  -->
<decoder name="web-accesslog">
  <type>web-log</type>
  <prematch>^\d+.\d+.\d+.\d+ - - [</prematch>
  <regex>^(\d+.\d+.\d+.\d+) - - [\S+ -\d+] </regex>
  <regex>"\w+ (\S+) HTTP\S+ (\d+) </regex>
  <order>srcip,url,id</order>
</decoder>


<!-- Squid access log decoder.
  - Will extract the srcip.
  - Author: Ahmet Ozturk
  - Examples:
  - 1140701044.525   1231 192.168.1.201 TCP_DENIED/400 1536
    GET ahmet - NONE/- text/html
  - 1140701230.827    781 192.168.1.210 TCP_DENIED/407 1785
    GET http://www.ossec.net oahmet NONE/- text/html
  -->
<decoder name="squid-accesslog">
  <type>squid</type>
  <prematch>^\d+ \d+.\d+.\d+.\d+ </prematch>
  <regex>^\d+ (\d+.\d+.\d+.\d+) (\w+)/(\d+) \d+ \w+ (\S+) </regex>
  <order>srcip,action,id,url</order>
</decoder>  


<!-- Windows decoder
  - Will extract url (as win source),action (as win category) and id.
  - Examples:
  - WinEvtLog: Application: INFORMATION(0x00000064): ESENT: 
    (no user)(no domain): 
  - WinEvtLog: Security: AUDIT_FAILURE(0x000002A9): Security: 
    SYSTEM: NT AUTHORITY: The logon to account: xyz    by: 
    MICROSOFT_AUTHENTICATION_PACKAGE_V1_0    from workstation: la    failed. 
    The error code was: 3221225572
  - WinEvtLog: Security: AUDIT_FAILURE(0x00000211): Security: 
    SYSTEM: NT AUTHORITY: Logon Failure:      Reason:     Unknown user 
    name or bad password       User Name:  ab      Domain:     cd      
    Logon Type: 2       Logon Process:  User32          Authentication 
    Package: Negotiate       Workstation Name:   ad
  -->
<decoder name="windows">
  <type>windows</type>
  <prematch>^WinEvtLog: </prematch>
  <regex>^WinEvtLog: (\w+): (\w+)\((\d+)\): \w+: (\w+):</regex>
  <order>url,action,id,user</order>
</decoder>    

<!-- EOF -->
