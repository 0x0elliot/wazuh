#!/usr/bin/env python
# Copyright (C) 2017 Wazuh Inc.
# October 05, 2017.
#
# This program is a free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public
# License (version 2) as published by the FSF - Free Software
# Foundation.
# Author Wazuh Integration: Wazuh, Inc <support@gmail.com>

import json
import sys
import time
import os
from socket import socket, AF_UNIX, SOCK_DGRAM


try:
    import requests
    from requests.auth import HTTPBasicAuth
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit()

# ossec.conf configuration:
#  <integration>
#      <name>virustotal</name>
#      <api_key>14cabb328e6701xx1124xxxx</api_key>
#      <group>syscheck</group>
#  </integration>

# Global vars
debug_enabled = False
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)
socket_addr = '{0}/queue/ossec/queue'.format(pwd)



def main(args):
	debug("*Main*")

	# Read args
	alert_file_location = args[1]
	apikey = args[2]
	debug(apikey)
	debug(alert_file_location)

	# Load alert. Parse JSON object.
	with open(alert_file_location) as alert_file:    
		json_alert = json.load(alert_file)
	debug(json_alert)

	# Request VirusTotal info
	msg = request_virustotal_info(json_alert,apikey)

	# If positive match, send event to Wazuh Manager
	if msg:
		send_event(msg)

def debug(msg):
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)

        print(msg)

        f = open(log_file,"a")
        f.write(msg)
        f.close()

def collect(data):
  sha1  = data['sha1']
  scan_date = data['scan_date']
  permalink = data['permalink']
  positives = data['positives']
  total = data['total']

  return sha1, scan_date, permalink, positives, total

def is_malware(positives):
  if positives > 0:
    return True
  else:
    return False

def in_database(data, hash):
  result = data['response_code']
  if result == 0: 
    return False
  return True

def query_api(hash, apikey):
  params = {'apikey': apikey, 'resource': hash}
  headers = {
  "Accept-Encoding": "gzip, deflate",
  "User-Agent" : "gzip,  Python library-client-VirusTotal"
  }
  response = requests.get('https://www.virustotal.com/vtapi/v2/file/report',params=params, headers=headers)
  print hash
  if response.status_code == 200:
	  json_response = response.json()
	  data = json_response
	  return data
  else:
	  debug("Error when conecting VirusTotal API")
	  response.raise_for_status()
	  exit(0)

def request_virustotal_info(alert, apikey):

	# If there is no a md5 checksum present in the alert. Exit.
	if not "md5_after" in alert["syscheck"]:
		return(0)

	# Request info using VirusTotal API
	data = query_api(alert["syscheck"]["md5_after"], apikey)

	# If VirusTotal does not have any info about our hash, ignore it
	if not in_database(data, hash):
	  debug('No entry for %s in database' % hash)
	  return(0)

	# Info about the file found in VirusTotal
	sha1, scan_date, permalink, positives, total = collect(data)

	# Checking if positives count is higher than 0
	if is_malware(positives):
	  alert_output = {}
	  # Prepare JSON Output object and send it to Wazuh Manager
	  alert_output["virustotal"] = {}
	  alert_output["virustotal"]["sha1"] = sha1
	  alert_output["virustotal"]["scan_date"] = scan_date
	  alert_output["virustotal"]["positives"] = positives
	  alert_output["virustotal"]["total"] = total
	  alert_output["virustotal"]["permalink"] = permalink
	  alert_output["syscheck"] = alert["syscheck"]
	  alert_output["source_agent"] = alert["agent"]
	  debug(alert_output)

	  return(alert)
	else:
	  debug('Entry %s is not malicious' % hash)
	  return(0)

def send_event(msg):
        #'1:json:{"example":1}'
	string = ' '.join(json.dumps(msg))
	sock = socket(AF_UNIX, SOCK_DGRAM)
	sock.connect(socket_addr)
	sock.send(string.encode())
	sock.close()

if __name__ == "__main__":
    try:
        # Read arguments
        bad_arguments = False
        if len(sys.argv) >= 2:
            alertfile=sys.argv[1]
            msg = '{0} {1} {2} {3}'.format(now, sys.argv[1], sys.argv[2], sys.argv[3])
        else:
            msg = '{0} Wrong arguments'.format(now)
            bad_arguments = True


        # Logging the call
        f = open(log_file, 'a')
        f.write(msg +'\n')
        f.close()

        if bad_arguments:
            debug("Exiting: Bad arguments.")
            sys.exit(1)

        # Main function
        main(sys.argv)

    except Exception as e:
        debug(str(e))
        raise
