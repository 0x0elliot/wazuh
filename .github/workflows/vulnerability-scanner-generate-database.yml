name: Vulnerability Scanner - Generate database

on:
  workflow_dispatch:
  schedule:
    - cron: '20 0 * * *'
  pull_request:
    paths:
      - ".github/workflows/vulnerability-scanner-generate-database.yml"
      - ".github/actions/compile_and_test/action.yml"
      - ".github/actions/vulnerability_scanner_deps/action.yml"

jobs:
  vulnerability-scanner-upload-database:
    strategy:
          fail-fast: false
          matrix:
              wazuh_version: ["4.8.0"]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Attempt to checkout to the tag
      # Skip if the event is a manual trigger
      - name: Tag checkout
        if: github.event_name != 'workflow_dispatch'
        run: |
            if git rev-parse --verify --quiet "refs/tags/v${{ matrix.wazuh_version }}"; then
              git checkout "tags/v${{ matrix.wazuh_version }}"
            else
              echo "Warning: Unable to find tag v${{ matrix.wazuh_version }}"
            fi
        shell: bash

      # Checkout to the branch if tag checkout failed
      - name: Branch checkout
        if: failure()
        run: |
          if git rev-parse --verify --quiet "${{ matrix.wazuh_version }}"; then
            git checkout "${{ matrix.wazuh_version }}"
          else
            echo "Error: Unable to find branch ${{ matrix.wazuh_version }}"
            exit 1
          fi
        shell: bash

      - name: Project dependencies
        uses: ./.github/actions/vulnerability_scanner_deps

      ########################
      # Compilation          #
      ########################

      # Router
      - name: Router - Compilation
        uses: ./.github/actions/compile_and_test
        with:
          path: src/shared_modules/router
          test: false

      # Indexer connector
      - name: Indexer connector - Compilation
        uses: ./.github/actions/compile_and_test
        with:
          path: src/shared_modules/indexer_connector
          test: false

      # Content manager
      - name: Content manager - Compilation
        uses: ./.github/actions/compile_and_test
        with:
          path: src/shared_modules/content_manager
          test: false

      # Vulnerability scanner
      - name: Vulnerability scanner - Compilation
        uses: ./.github/actions/compile_and_test
        with:
          path: src/wazuh_modules/vulnerability_scanner
          test: false

      - name: Vulnerability scanner - Run vd_scanner_testtool
        run: |
          TEST_TOOL_PATH=./src/wazuh_modules/vulnerability_scanner/build/testtool/scanner/vd_scanner_testtool
          CONFIG_PATH=src/wazuh_modules/vulnerability_scanner/testtool/scanner/config.json
          TEMPLATE_PATH=src/wazuh_modules/vulnerability_scanner/indexer/template/index-template.json
          
          if [ ! -f "${TEST_TOOL_PATH}" ]; then
            echo "Error: The file '${TEST_TOOL_PATH}' does not exist."
            exit 1
          fi

          if [ ! -f "${CONFIG_PATH}" ]; then
            echo "Error: The file '${CONFIG_PATH}' does not exist."
            exit 1
          fi

          if [ ! -f "${TEMPLATE_PATH}" ]; then
            echo "Error: The file '${TEMPLATE_PATH}' does not exist."
            exit 1
          fi

          echo "Running '${TEST_TOOL_PATH}'..."
          ${TEST_TOOL_PATH} -c ${CONFIG_PATH} -t ${TEMPLATE_PATH} -d
        shell: bash

      - name: Vulnerability scanner - Compress queue folder
        run: |
          rm -rf queue/indexer
          rm -rf queue/sockets
          rm -rf queue/router
          rm -rf queue/vd_updater/tmp
          rm -rf queue/vd/reports
          rm -rf queue/vd/sync
          rm -rf queue/vd/deltas
          rm -rf queue/vd/state_track

          VD_FILENAME=vd_1.0.0_vd_${{ matrix.wazuh_version }}.tar.xz

          echo "Compressing into '${VD_FILENAME}'..."
          tar -cJf ${VD_FILENAME} --owner=0 --group=0 --no-same-owner --no-same-permissions queue

          if [ ! -f "${VD_FILENAME}" ]; then
            echo "Error: The file '${VD_FILENAME}' does not exist or could not be generated."
            exit 1
          else
              echo "File '${VD_FILENAME}' generated successfully."
              echo "Size of '${VD_FILENAME}': $(du -h "${VD_FILENAME}" | cut -f1)"
          fi
        shell: bash

      - name: Vulnerability scanner - Uploading file to S3
        run: |
          echo "Event that triggered the workflow: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == 'pull_request' ]; then
            echo "Skipping upload to S3 for pull requests"
          else
            root_folder=$(pwd)
            bucket="${{ secrets.FEED_AWS_BUCKET }}"
            file="vd_1.0.0_vd_${{ matrix.wazuh_version }}.tar.xz"
            dest_dir="deps/vulnerability_model_database"
            aws s3 cp ${file} s3://${bucket}/${dest_dir}/${file} --acl public-read
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FEED_AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FEED_AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: 'us-west-1'
        shell: bash
