/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * February 21, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "buildAllAgentListContext_test.hpp"
#include "TrampolineOsDataCache.hpp"
#include "TrampolineRemediationDataCache.hpp"
#include "TrampolineSocketDBWrapper.hpp"
#include "buildAllAgentListContext.hpp"

using TrampolineScanContext = TScanContext<TrampolineOsDataCache, GlobalData, TrampolineRemediationDataCache>;

TEST_F(BuildAllAgentListContextTest, BuildAllAgentListContext)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();
    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_)).Times(1);

    auto allAgentContext = std::make_shared<
        TBuildAllAgentListContext<TScanContext<TrampolineOsDataCache, GlobalData, TrampolineRemediationDataCache>,
                                  TrampolineSocketDBWrapper>>();

    auto scanContext =
        std::make_shared<TScanContext<TrampolineOsDataCache, GlobalData, TrampolineRemediationDataCache>>();
    allAgentContext->handleRequest(scanContext);
}

TEST_F(BuildAllAgentListContextTest, BuildAllAgentListContextWithElements)
{
    static const std::string MESSAGE {
        R"(ok [{"id":1, "name":"name", "version": "Wazuh 4.4.4", "ip":"192.168.0.1","node_name":"node_1"}])"};

    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    nlohmann::json queryResult = nlohmann::json::parse(R"([
        {
        "id": 1,
        "name": "name",
        "version": "Wazuh 4.4.4",
        "ip": "192.168.0.1",
        "node_name": "node_1"
        }
    ])");

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto allAgentContext =
        std::make_shared<TBuildAllAgentListContext<TrampolineScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<TrampolineScanContext>();

    // Context is not used
    allAgentContext->handleRequest(scanContext);

    EXPECT_EQ(scanContext->m_agents.size(), 1);
}
