/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * September 21, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "factoryOrchestrator_test.hpp"

/*
 * @brief Test the chain creation for packages.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypePackageInsert)
{
    // Create the orchestrator for PackageInsert.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::PackageInsert, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the chain creation for packages.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypePackageDelete)
{
    // Create the orchestrator for PackageDelete.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::PackageDelete, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the chain creation for packages.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypeIntegrityClear)
{
    // Create the orchestrator for IntegrityClear.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::IntegrityClear, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the chain creation for os.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypeOs)
{
    // Create the orchestrator for Os.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::Os, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the chain creation for hotfixes.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypeHotfixInsert)
{
    // Create the orchestrator for HotfixInsert.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::HotfixInsert, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the chain creation for hotfixes.
 */
TEST_F(FactoryOrchestratorTest, TestScannerTypeHotfixDelete)
{
    // Create the orchestrator for HotfixDelete.
    EXPECT_NO_THROW(FactoryOrchestrator::create(ScannerType::HotfixDelete, NULL, NULL, *m_inventoryDatabase, NULL));
}

/*
 * @brief Test the creation of an invalid scanner.
 */
TEST_F(FactoryOrchestratorTest, TestCreationInvalidScannerType)
{
    // Create the orchestrator with invalid ScannerType.
    ScannerType invalidScannerType {-1};
    EXPECT_THROW(FactoryOrchestrator::create(invalidScannerType, NULL, NULL, *m_inventoryDatabase, NULL),
                 std::runtime_error);
}
