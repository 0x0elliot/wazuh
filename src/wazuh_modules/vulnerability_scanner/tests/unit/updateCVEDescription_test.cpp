/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "updateCVEDescription_test.hpp"
#include "databaseFeedManager/databaseFeedManager.hpp"
#include "databaseFeedManager/updateCVEDescription.hpp"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "flatbuffers/verifier.h"
#include "rocksDBWrapper.hpp"

const std::string cve5FlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/cve5.fbs"};
const std::string cvssFlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/cvss.fbs"};
const std::string vulnRemFlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/vulnerabilityRemediations.fbs"};
const std::string DATABASE_DIR {"queue/vd"};
const char* INCLUDE_DIRECTORIES[] = {FLATBUFFER_SCHEMAS_DIR, nullptr};

const std::string jsonStrInvalid {
    R"({
                "containers": {
                    "cna": {
                    "affected": [
                        {
                        "defaultStatus": "unaffected",
                        "product": "vim",
                        "vendor": "arch",
                        "versions": [
                            {
                            "lessThan": "8.2.4651-1",
                            "status": "affected",
                            "version": "8.2.4464-1",
                            "versionType": "custom"
                            }
                        ]
                        },
                        {
                        "defaultStatus": "unaffected",
                        "product": "gvim",
                        "vendor": "arch",
                        "versions": [
                            {
                            "lessThan": "8.2.4651-1",
                            "status": "affected",
                            "version": "8.2.4464-1",
                            "versionType": "custom"
                            }
                        ]
                        }
                    ],
                    "providerMetadata": {
                        "orgId": "00000000-0000-4000-A000-000000000002",
                        "shortName": "arch"
                    },
                    "references": [
                        {
                        "url": "https://security.archlinux.org/CVE-2022-1154"
                        }
                    ],
                    "descriptions": [
                        {
                        "lang": "en",
                        "value": "not defined"
                        }
                    ]
                    }
                },
                "cveMetadata": {
                    "assignerOrgId": "00000000-0000-4000-A000-000000000002",
                    "assignerShortName": "arch",
                    "cveId": "CVE-2022-1154",
                    "state": "PUBLISHED"
                },
                "dataType": "CVE_RECORD",
                "dataVersion": "5.0"
})"};

const std::string jsonStrValid {
    R"({
                "containers": {
                    "cna": {
                    "affected": [
                        {
                        "cpes": [
                            "cpe:2.3:a:google:chrome:*:*:*:*:*:*:*:*"
                        ],
                        "defaultStatus": "unaffected",
                        "product": "chrome",
                        "vendor": "google",
                        "versions": [
                            {
                            "lessThan": "98.0.4758.102",
                            "status": "affected",
                            "version": "0",
                            "versionType": "custom"
                            }
                        ]
                        }
                    ],
                    "descriptions": [
                        {
                        "lang": "en",
                        "value": "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and convinced a user to enage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."
                        }
                    ],
                    "metrics": [
                        {
                        "cvssV3_1": {
                            "attackComplexity": "LOW",
                            "attackVector": "NETWORK",
                            "availabilityImpact": "HIGH",
                            "baseScore": 8.8,
                            "baseSeverity": "HIGH",
                            "confidentialityImpact": "HIGH",
                            "integrityImpact": "HIGH",
                            "privilegesRequired": "NONE",
                            "scope": "UNCHANGED",
                            "userInteraction": "REQUIRED",
                            "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
                            "version": "3.1"
                        },
                        "format": "CVSS"
                        },
                        {
                        "cvssV2_0": {
                            "accessComplexity": "MEDIUM",
                            "accessVector": "NETWORK",
                            "authentication": "NONE",
                            "availabilityImpact": "PARTIAL",
                            "baseScore": 6.8,
                            "confidentialityImpact": "PARTIAL",
                            "integrityImpact": "PARTIAL",
                            "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
                            "version": "2.0"
                        },
                        "format": "CVSS"
                        }
                    ],
                    "problemTypes": [
                        {
                        "descriptions": [
                            {
                            "description": "CWE-416",
                            "lang": "en"
                            }
                        ]
                        }
                    ],
                    "providerMetadata": {
                        "orgId": "00000000-0000-4000-A000-000000000003",
                        "shortName": "nvd",
                        "dateUpdated": "2022-04-11T09:33:00Z"
                    },
                    "references": [
                        {
                        "name": "https://crbug.com/1286940",
                        "tags": [
                            "issue-tracking",
                            "permissions-required",
                            "vendor-advisory"
                        ],
                        "url": "https://crbug.com/1286940"
                        },
                        {
                        "name": "https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop_14.html",
                        "tags": [
                            "release-notes",
                            "vendor-advisory"
                        ],
                        "url": "https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop_14.html"
                        }
                    ]
                    }
                },
                "cveMetadata": {
                    "assignerOrgId": "00000000-0000-4000-A000-000000000003",
                    "assignerShortName": "nvd",
                    "cveId": "CVE-2022-0605",
                    "datePublished": "2022-04-05T00:15:00Z",
                    "dateUpdated": "2022-04-11T09:33:00Z",
                    "state": "PUBLISHED"
                },
                "dataType": "CVE_RECORD",
                "dataVersion": "5.0"
})"};

const std::string resourceValid {"CVE-2022-0605"};
const std::string resourceInvalid {"CVE-2022-1154"};

TEST_F(UpdateCVEDescriptionTest, StoreCVEDescription)
{
    // Create rocksDB base directory.
    std::filesystem::create_directories(DATABASE_DIR);

    std::string cve5FlatbufferSchemaStr;
    std::string cvssFlatbufferSchemaStr;

    // Read schemas from filesystem.
    bool valid = (flatbuffers::LoadFile(cve5FlatbufferSchemaPath.c_str(), false, &cve5FlatbufferSchemaStr) &&
                  flatbuffers::LoadFile(cvssFlatbufferSchemaPath.c_str(), false, &cvssFlatbufferSchemaStr));
    ASSERT_EQ(valid, true);
    ASSERT_EQ(jsonStrValid.empty(), false);

    // Parse schemas and JSON example.
    flatbuffers::Parser parser;
    valid = (parser.Parse(cve5FlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) && parser.Parse(jsonStrValid.c_str()));
    ASSERT_EQ(valid, true);

    // Get flatbuffer pointer
    uint8_t* buf = parser.builder_.GetBufferPointer();
    size_t flatbufferSize = parser.builder_.GetSize();

    // Verify flatbuffer.
    flatbuffers::Verifier verifierCVE5(buf, flatbufferSize);
    ASSERT_EQ(cve_v5::VerifyEntryBuffer(verifierCVE5), true);
    const cve_v5::Entry* cve5Flatbuffer = cve_v5::GetEntry(buf);

    UpdateCVEDescription::storeVulnerabilityDescription(resourceValid, cve5Flatbuffer);

    // Get flatbuffer from vulnerability description database.
    Utils::RocksDBWrapper rocksDBWrapper(DESCRIPTION_DATABASE_PATH);
    std::string vulnerabilityDescriptionFBStr;
    rocksDBWrapper.get(resourceValid, vulnerabilityDescriptionFBStr);

    // Verify flatbuffer.
    flatbuffers::Verifier verifierVulnDesc(reinterpret_cast<const uint8_t*>(vulnerabilityDescriptionFBStr.c_str()),
                                           vulnerabilityDescriptionFBStr.size());
    EXPECT_EQ(NSVulnerabilityScanner::VerifyVulnerabilityDescriptionBuffer(verifierVulnDesc), true);

    // Read flatbuffer values.
    auto vulnerabilityDescription =
        NSVulnerabilityScanner::GetVulnerabilityDescription(vulnerabilityDescriptionFBStr.c_str());

    EXPECT_EQ(vulnerabilityDescription->scoreVersion()->str(), "3.1");
    EXPECT_EQ(vulnerabilityDescription->severity()->str(), "HIGH");
    EXPECT_EQ(vulnerabilityDescription->scoreBase(), (float)8.8);
    EXPECT_EQ(vulnerabilityDescription->description()->str(),
              "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who "
              "convinced a user to install a malicious extension and convinced a user to enage in specific user "
              "interaction to potentially exploit heap corruption via a crafted HTML page.");
    EXPECT_EQ(vulnerabilityDescription->classification()->str(), "CVSS");
    EXPECT_EQ(vulnerabilityDescription->reference()->str(),
              "https://crbug.com/1286940, "
              "https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop_14.html");

    std::filesystem::remove_all(DATABASE_DIR);
}

TEST_F(UpdateCVEDescriptionTest, StoreCVEDescriptionMissingMetrics)
{
    // Create rocksDB base directory.
    std::filesystem::create_directories(DATABASE_DIR);

    std::string cve5FlatbufferSchemaStr;
    std::string cvssFlatbufferSchemaStr;

    // Read schemas from filesystem.
    bool valid = (flatbuffers::LoadFile(cve5FlatbufferSchemaPath.c_str(), false, &cve5FlatbufferSchemaStr) &&
                  flatbuffers::LoadFile(cvssFlatbufferSchemaPath.c_str(), false, &cvssFlatbufferSchemaStr));
    ASSERT_EQ(valid, true);
    ASSERT_EQ(jsonStrValid.empty(), false);

    // Parse schemas and JSON example.
    flatbuffers::Parser parser;
    valid =
        (parser.Parse(cve5FlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) && parser.Parse(jsonStrInvalid.c_str()));
    ASSERT_EQ(valid, true);

    // Get flatbuffer pointer
    uint8_t* buf = parser.builder_.GetBufferPointer();
    size_t flatbufferSize = parser.builder_.GetSize();

    // Verify flatbuffer.
    flatbuffers::Verifier verifierCVE5(buf, flatbufferSize);
    ASSERT_EQ(cve_v5::VerifyEntryBuffer(verifierCVE5), true);
    const cve_v5::Entry* cve5Flatbuffer = cve_v5::GetEntry(buf);

    UpdateCVEDescription::storeVulnerabilityDescription(resourceInvalid, cve5Flatbuffer);

    // Get flatbuffer from vulnerability description database.
    Utils::RocksDBWrapper rocksDBWrapper(DESCRIPTION_DATABASE_PATH);
    std::string vulnerabilityDescriptionFBStr;
    rocksDBWrapper.get(resourceInvalid, vulnerabilityDescriptionFBStr);

    // Verify flatbuffer.
    flatbuffers::Verifier verifierVulnDesc(reinterpret_cast<const uint8_t*>(vulnerabilityDescriptionFBStr.c_str()),
                                           vulnerabilityDescriptionFBStr.size());
    EXPECT_EQ(NSVulnerabilityScanner::VerifyVulnerabilityDescriptionBuffer(verifierVulnDesc), true);

    // Read flatbuffer values.
    auto vulnerabilityDescription =
        NSVulnerabilityScanner::GetVulnerabilityDescription(vulnerabilityDescriptionFBStr.c_str());

    EXPECT_EQ(vulnerabilityDescription->scoreVersion()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->severity()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->scoreBase(), (float)0);
    EXPECT_EQ(vulnerabilityDescription->description()->str(), "not defined");
    EXPECT_EQ(vulnerabilityDescription->classification()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->reference()->str(), "https://security.archlinux.org/CVE-2022-1154");

    std::filesystem::remove_all(DATABASE_DIR);
}
