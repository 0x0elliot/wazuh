/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * October 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "updateCVEDescription_test.hpp"
#include "databaseFeedManager/databaseFeedManager.hpp"
#include "databaseFeedManager/updateCVEDescription.hpp"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "rocksDBWrapper.hpp"

const std::string cve5FlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/cve5.fbs"};
const std::string cvssFlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/cvss.fbs"};
const std::string vulnRemFlatbufferSchemaPath {FLATBUFFER_SCHEMAS_DIR "/vulnerabilityRemediations.fbs"};
const std::string DATABASE_DIR {"queue/vd"};
const char* INCLUDE_DIRECTORIES[] = {FLATBUFFER_SCHEMAS_DIR, nullptr};

const std::string jsonStrInvalid {
    "{\"containers\":{\"cna\":{\"affected\":[{\"defaultStatus\":\"unaffected\",\"product\":\"vim\",\"vendor\":\"arch\","
    "\"versions\":[{\"lessThan\":\"8.2.4651-1\",\"status\":\"affected\",\"version\":\"8.2.4464-1\",\"versionType\":"
    "\"custom\"}]},"
    "{\"defaultStatus\":\"unaffected\",\"product\":\"gvim\",\"vendor\":\"arch\",\"versions\":[{\"lessThan\":\"8.2.4651-"
    "1\",\"status\":\"affected\","
    "\"version\":\"8.2.4464-1\",\"versionType\":\"custom\"}]}],\"providerMetadata\":{\"orgId\":\"00000000-0000-4000-"
    "A000-000000000002\",\"shortName\":\"arch\"},"
    "\"references\":[{\"url\":\"https://security.archlinux.org/"
    "CVE-2022-1160\"}],\"descriptions\":[{\"lang\":\"en\",\"value\":\"not defined\"}]}},"
    "\"cveMetadata\":{\"assignerOrgId\":\"00000000-0000-4000-A000-000000000002\",\"assignerShortName\":\"arch\","
    "\"cveId\":\"CVE-2022-1160\","
    "\"state\":\"PUBLISHED\"},\"dataType\":\"CVE_RECORD\",\"dataVersion\":\"5.0\"}"};

const std::string jsonStrValid {
    "{\"containers\":{\"cna\":{\"affected\":[{\"cpes\":[\"cpe:2.3:a:arm:mbed_tls:3.0.0:preview1:*:*:*:*:*:*\"],"
    "\"defaultStatus\":\"unaffected\",\"product\":\"mbed_tlspreview1\",\"vendor\":\"arm\",\"versions\":[{\"status\":"
    "\"affected\",\"version\":\"3.0.0\"}]},{\"cpes\":[\"cpe:2.3:a:arm:mbed_tls:*:*:*:*:*:*:*:*\",\"cpe:2.3:a:arm:mbed_"
    "tls:3.0.0:-:*:*:*:*:*:*\"],\"defaultStatus\":\"unaffected\",\"product\":\"mbed_tls\",\"vendor\":\"arm\","
    "\"versions\":[{\"lessThan\":\"2.16.12\",\"status\":\"affected\",\"version\":\"0\",\"versionType\":\"custom\"},{"
    "\"lessThan\":\"2.28.0\",\"status\":\"affected\",\"version\":\"2.17.0\",\"versionType\":\"custom\"},{\"status\":"
    "\"affected\",\"version\":\"3.0.0\"}]}],\"descriptions\":[{\"lang\":\"en\",\"value\":\"Mbed TLS before 3.0.1 has a "
    "double free incertain out-of-memory conditions, as demonstrated by an mbedtls_ssl_set_session() "
    "failure.\"}],\"metrics\":[{\"cvssV3_1\":{\"attackComplexity\":\"LOW\",\"attackVector\":\"NETWORK\","
    "\"availabilityImpact\":\"HIGH\",\"baseScore\":9.8,\"baseSeverity\":\"CRITICAL\",\"confidentialityImpact\":"
    "\"HIGH\",\"integrityImpact\":\"HIGH\",\"privilegesRequired\":\"NONE\",\"scope\":\"UNCHANGED\",\"userInteraction\":"
    "\"NONE\",\"vectorString\":\"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/"
    "A:H\",\"version\":\"3.1\"},\"format\":\"CVSS\"},{\"cvssV2_0\":{\"accessComplexity\":\"LOW\",\"accessVector\":"
    "\"NETWORK\",\"authentication\":\"NONE\",\"availabilityImpact\":\"PARTIAL\",\"baseScore\":7.5,"
    "\"confidentialityImpact\":\"PARTIAL\",\"integrityImpact\":\"PARTIAL\",\"vectorString\":\"AV:N/AC:L/Au:N/C:P/I:P/"
    "A:P\",\"version\":\"2.0\"},\"format\":\"CVSS\"}],\"problemTypes\":[{\"descriptions\":[{\"description\":\"CWE-"
    "415\",\"lang\":\"en\"}]}],\"providerMetadata\":{\"orgId\":\"00000000-0000-4000-A000-000000000000\",\"shortName\":"
    "\"@mitre.org\"},\"references\":[{\"name\":\"https://github.com/ARMmbed/mbedtls/releases/tag/"
    "v2.16.12\",\"tags\":[\"release-notes\",\"third-party-advisory\"],\"url\":\"https://github.com/ARMmbed/mbedtls/"
    "releases/tag/v2.16.12\"},{\"name\":\"https://github.com/ARMmbed/mbedtls/"
    "releases\",\"tags\":[\"release-notes\",\"third-party-advisory\"],\"url\":\"https://github.com/ARMmbed/mbedtls/"
    "releases\"},{\"name\":\"https://github.com/ARMmbed/mbedtls/releases/tag/"
    "v3.1.0\",\"tags\":[\"release-notes\",\"third-party-advisory\"],\"url\":\"https://github.com/ARMmbed/mbedtls/"
    "releases/tag/v3.1.0\"},{\"name\":\"https://bugs.gentoo.org/"
    "829660\",\"tags\":[\"issue-tracking\",\"mailing-list\",\"third-party-advisory\"],\"url\":\"https://"
    "bugs.gentoo.org/829660\"},{\"name\":\"https://github.com/ARMmbed/mbedtls/releases/tag/"
    "v2.28.0\",\"tags\":[\"release-notes\",\"third-party-advisory\"],\"url\":\"https://github.com/ARMmbed/mbedtls/"
    "releases/tag/v2.28.0\"},{\"name\":\"https://tls.mbed.org/tech-updates/security-advisories/"
    "mbedtls-security-advisory-2021-12\",\"tags\":[\"exploit\",\"mitigation\",\"third-party-advisory\"],\"url\":"
    "\"https://tls.mbed.org/tech-updates/security-advisories/"
    "mbedtls-security-advisory-2021-12\"}]}},\"cveMetadata\":{\"assignerOrgId\":\"00000000-0000-4000-A000-"
    "000000000000\",\"assignerShortName\":\"@mitre.org\",\"cveId\":\"CVE-2021-44732\",\"datePublished\":\"2021-12-"
    "20T08:15:00.000Z\",\"dateUpdated\":\"2021-12-29T18:48:00.000Z\",\"state\":\"PUBLISHED\"},\"dataType\":\"CVE_"
    "RECORD\",\"dataVersion\":\"5.0\"}"};

const std::string resource {"CVE-2021-44732"};

TEST_F(UpdateCVEDescriptionTest, StoreCVEDescription)
{
    // Create rocksDB base directory.
    std::filesystem::create_directories(DATABASE_DIR);

    std::string cve5FlatbufferSchemaStr;
    std::string cvssFlatbufferSchemaStr;

    // Read schemas from filesystem.
    bool valid = (flatbuffers::LoadFile(cve5FlatbufferSchemaPath.c_str(), false, &cve5FlatbufferSchemaStr) &&
                  flatbuffers::LoadFile(cvssFlatbufferSchemaPath.c_str(), false, &cvssFlatbufferSchemaStr));
    assert(valid == true);
    assert(!jsonStrValid.empty());

    // Parse schemas and JSON example.
    flatbuffers::Parser parser;
    valid = (parser.Parse(cve5FlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) && parser.Parse(jsonStrValid.c_str()));
    assert(valid == true);

    // Get flatbuffer pointer
    uint8_t* buf = parser.builder_.GetBufferPointer();
    size_t flatbufferSize = parser.builder_.GetSize();

    UpdateCVEDescription::storeVulnerabilityDescription(resource, buf, flatbufferSize);

    // Get flatbuffer from vulnerability description database.
    Utils::RocksDBWrapper rocksDBWrapper(DESCRIPTION_DATABASE_PATH);
    std::string vulnerabilityDescriptionFBStr;
    rocksDBWrapper.get(resource, vulnerabilityDescriptionFBStr);

    // Verify flatbuffer.
    flatbuffers::Verifier verifier(reinterpret_cast<const uint8_t*>(vulnerabilityDescriptionFBStr.c_str()),
                                   vulnerabilityDescriptionFBStr.size());
    EXPECT_EQ(NSVulnerabilityScanner::VerifyVulnerabilityDescriptionBuffer(verifier), true);

    // Read flatbuffer values.
    auto vulnerabilityDescription =
        NSVulnerabilityScanner::GetVulnerabilityDescription(vulnerabilityDescriptionFBStr.c_str());

    EXPECT_EQ(vulnerabilityDescription->scoreVersion()->str(), "3.1");
    EXPECT_EQ(vulnerabilityDescription->severity()->str(), "CRITICAL");
    EXPECT_EQ(vulnerabilityDescription->scoreBase(), (float)9.8);
    EXPECT_EQ(vulnerabilityDescription->description()->str(),
              "Mbed TLS before 3.0.1 has a double free incertain out-of-memory conditions, as demonstrated by an "
              "mbedtls_ssl_set_session() failure.");
    EXPECT_EQ(vulnerabilityDescription->classification()->str(), "CVSS");
    EXPECT_EQ(vulnerabilityDescription->reference()->str(),
              "https://github.com/ARMmbed/mbedtls/releases/tag/v2.16.12, https://github.com/ARMmbed/mbedtls/releases, "
              "https://github.com/ARMmbed/mbedtls/releases/tag/v3.1.0, https://bugs.gentoo.org/829660, "
              "https://github.com/ARMmbed/mbedtls/releases/tag/v2.28.0, "
              "https://tls.mbed.org/tech-updates/security-advisories/mbedtls-security-advisory-2021-12");

    std::filesystem::remove_all(DATABASE_DIR);
}

TEST_F(UpdateCVEDescriptionTest, StoreCVEDescriptionMissingMetrics)
{
    // Create rocksDB base directory.
    std::filesystem::create_directories(DATABASE_DIR);

    std::string cve5FlatbufferSchemaStr;
    std::string cvssFlatbufferSchemaStr;

    // Read schemas from filesystem.
    bool valid = (flatbuffers::LoadFile(cve5FlatbufferSchemaPath.c_str(), false, &cve5FlatbufferSchemaStr) &&
                  flatbuffers::LoadFile(cvssFlatbufferSchemaPath.c_str(), false, &cvssFlatbufferSchemaStr));
    assert(valid == true);
    assert(!jsonStrInvalid.empty());

    // Parse schemas and JSON example.
    flatbuffers::Parser parser;
    valid =
        (parser.Parse(cve5FlatbufferSchemaStr.c_str(), INCLUDE_DIRECTORIES) && parser.Parse(jsonStrInvalid.c_str()));
    assert(valid == true);

    // Get flatbuffer pointer
    uint8_t* buf = parser.builder_.GetBufferPointer();
    size_t flatbufferSize = parser.builder_.GetSize();

    UpdateCVEDescription::storeVulnerabilityDescription(resource, buf, flatbufferSize);

    // Get flatbuffer from vulnerability description database.
    Utils::RocksDBWrapper rocksDBWrapper(DESCRIPTION_DATABASE_PATH);
    std::string vulnerabilityDescriptionFBStr;
    rocksDBWrapper.get(resource, vulnerabilityDescriptionFBStr);

    // Verify flatbuffer.
    flatbuffers::Verifier verifier(reinterpret_cast<const uint8_t*>(vulnerabilityDescriptionFBStr.c_str()),
                                   vulnerabilityDescriptionFBStr.size());
    EXPECT_EQ(NSVulnerabilityScanner::VerifyVulnerabilityDescriptionBuffer(verifier), true);

    // Read flatbuffer values.
    auto vulnerabilityDescription =
        NSVulnerabilityScanner::GetVulnerabilityDescription(vulnerabilityDescriptionFBStr.c_str());

    EXPECT_EQ(vulnerabilityDescription->scoreVersion()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->severity()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->scoreBase(), (float)0);
    EXPECT_EQ(vulnerabilityDescription->description()->str(), "not defined");
    EXPECT_EQ(vulnerabilityDescription->classification()->str(), "");
    EXPECT_EQ(vulnerabilityDescription->reference()->str(), "https://security.archlinux.org/CVE-2022-1160");

    std::filesystem::remove_all(DATABASE_DIR);
}
