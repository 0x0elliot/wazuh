/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * September 21, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "cleanInventory_test.hpp"
#include "../../../../shared_modules/utils/flatbuffers/include/syscollector_deltas_generated.h"
#include "../../../../shared_modules/utils/flatbuffers/include/syscollector_deltas_schema.h"
#include "../../../../shared_modules/utils/flatbuffers/include/syscollector_synchronization_generated.h"
#include "../../../../shared_modules/utils/flatbuffers/include/syscollector_synchronization_schema.h"
#include "../scanOrchestrator/cleanInventory.hpp"
#include "MockOsDataCache.hpp"
#include "TrampolineOsDataCache.hpp"
#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "json.hpp"
#include "mocks/chainOfResponsabilityMock.h"

using ::testing::_;

namespace NSCleanInventoryTest
{
    constexpr auto TEST_INVENTORY_DATABASE_PATH {"queue/vd/inventory"};

    const std::string SYNCHRONIZATION_INTEGRITY_CLEAR_MSG =
        R"(
            {
                "agent_info": {
                    "agent_id": "001",
                    "agent_ip": "192.168.33.20",
                    "agent_name": "focal",
                    "node_name": "node01"
                },
                "data_type": "integrity_clear",
                "data": {
                    "id": 1700236640,
                    "attributes_type": "syscollector_packages"
                }
            }
        )";

    const std::string CVEID1 {"CVE-2024-5678"};
    const std::string CVEID2 {"CVE-2023-5362"};
} // namespace NSCleanInventoryTest

using namespace NSCleanInventoryTest;

void CleanInventoryTest::SetUp()
{
    m_inventoryDatabase = std::make_unique<Utils::RocksDBWrapper>(TEST_INVENTORY_DATABASE_PATH);
    for (const auto& element : AFFECTED_COMPONENT_COLUMNS)
    {
        if (!m_inventoryDatabase->columnExists(element.second))
        {
            m_inventoryDatabase->createColumn(element.second);
        }
    }

    if (!m_inventoryDatabase->columnExists(OS_INITIAL_SCAN))
    {
        m_inventoryDatabase->createColumn(OS_INITIAL_SCAN);
    }
}

void CleanInventoryTest::TearDown()
{
    spOsDataCacheMock.reset();
    m_inventoryDatabase->deleteAll();
    m_inventoryDatabase.reset();
    std::filesystem::remove_all(TEST_INVENTORY_DATABASE_PATH);
}

/*
 * @brief Test instantiation of the eventInsertInventory class.
 */
TEST_F(CleanInventoryTest, TestInstantiationOfTheeventInsertInventoryClass)
{
    // Instantiation of the eventInsertInventory class.
    EXPECT_NO_THROW(
        std::make_shared<TCleanInventory<TScanContext<TrampolineOsDataCache>>>(*m_inventoryDatabase, nullptr));
}

/*
 * @brief Test handleRequest of the eventInsertInventory class (Integrity Clear).
 */
TEST_F(CleanInventoryTest, TestHandleRequestIntegrityClear)
{
    // Instantiation of the eventInsertInventory class.
    m_inventoryDatabase->put(
        "node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5", "CVE-2021-33560,CVE-2019-13627,CVE-2021-40528", PACKAGE);
    auto spSubOrchestration =
        std::make_shared<MockAbstractHandler<std::shared_ptr<TScanContext<TrampolineOsDataCache>>>>();
    EXPECT_CALL(*spSubOrchestration, handleRequest(testing::_)).Times(3);

    auto eventInsertInventory =
        std::make_shared<TCleanInventory<TScanContext<TrampolineOsDataCache>,
                                         MockAbstractHandler<std::shared_ptr<TScanContext<TrampolineOsDataCache>>>>>(
            *m_inventoryDatabase, spSubOrchestration);

    Os osData {.hostName = "osdata_hostname",
               .architecture = "osdata_architecture",
               .name = "osdata_name",
               .codeName = "osdata_codeName",
               .majorVersion = "osdata_majorVersion",
               .minorVersion = "osdata_minorVersion",
               .patch = "osdata_patch",
               .build = "osdata_build",
               .platform = "osdata_platform",
               .version = "osdata_version",
               .release = "osdata_release",
               .displayVersion = "osdata_displayVersion",
               .sysName = "osdata_sysName",
               .kernelVersion = "osdata_kernelVersion",
               .kernelRelease = "osdata_kernelRelease"};

    spOsDataCacheMock = std::make_shared<MockOsDataCache>();
    EXPECT_CALL(*spOsDataCacheMock, getOsData(_)).WillRepeatedly(testing::Return(osData));

    // Mock scanContext.
    flatbuffers::Parser parser;
    ASSERT_TRUE(parser.Parse(syscollector_synchronization_SCHEMA));
    ASSERT_TRUE(parser.Parse(SYNCHRONIZATION_INTEGRITY_CLEAR_MSG.c_str()));
    uint8_t* buffer = parser.builder_.GetBufferPointer();
    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, const nlohmann::json*>
        syscollectorSync = SyscollectorSynchronization::GetSyncMsg(reinterpret_cast<const char*>(buffer));

    // Create a ScanContext object.
    auto scanContextOriginal = std::make_shared<TScanContext<TrampolineOsDataCache>>(syscollectorSync);

    // Call handleRequest method.
    std::shared_ptr<TScanContext<TrampolineOsDataCache>> scanContextResult;
    EXPECT_NO_THROW(scanContextResult = eventInsertInventory->handleRequest(scanContextOriginal));

    for (const auto& [key, value] : scanContextResult->m_elements)
    {
        EXPECT_THAT(key,
                    testing::AnyOf(testing::Eq("node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-40528"),
                                   testing::Eq("node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2019-13627"),
                                   testing::Eq("node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-33560")));
        EXPECT_THAT(
            value.dump(),
            testing::AnyOf(
                testing::Eq(
                    R"({"id":"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-40528","operation":"DELETED"})"),
                testing::Eq(
                    R"({"id":"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2019-13627","operation":"DELETED"})"),
                testing::Eq(
                    R"({"id":"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-33560","operation":"DELETED"})")));
    }

    std::string inventoryEntry;
    EXPECT_FALSE(
        m_inventoryDatabase->get("node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5", inventoryEntry, PACKAGE));
}
