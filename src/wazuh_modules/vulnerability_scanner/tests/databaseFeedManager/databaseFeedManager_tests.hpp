/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * September 19, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _DATABASE_FEED_MANAGER_TESTS_HPP
#define _DATABASE_FEED_MANAGER_TESTS_HPP

#include "databaseFeedManager.hpp"
#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "scanContext.hpp"
#include "scanVulnerabilityCandidate_generated.h"
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include <filesystem>
#include "databaseFeedManager_traps.hpp"

constexpr auto DESCRIPTION_DATABASE_DIR {"queue/vd"};

const std::string vulnerabilityCandidateExample {
    "[{\"cveId\":\"CVE-1999-1234\",\"defaultStatus\":\"unaffected\",\"platforms\":[\"ubuntu\"],"
    "\"versions\":[{\"status\":\"affected\",\"version\":\"1.0.2\"},{\"lessThan\":\"1.1.5-1\",\"status\":\"affected\","
    "\"version\":\"0\",\"versionType\":\"deb\"},"
    "{\"lessThan\":\"*\",\"status\":\"affected\",\"version\":\"0\",\"versionType\":\"custom\"}]},{\"cveId\":\"CVE-1999-"
    "1235\",\"defaultStatus\":\"unaffected\","
    "\"platforms\":[\"ubuntu\"],\"versions\":[{\"status\":\"affected\",\"version\":\"1.0.2\"},{\"lessThan\":\"1.1.5-"
    "1\",\"status\":\"affected\",\"version\":\"0\","
    "\"versionType\":\"deb\"},{\"lessThan\":\"*\",\"status\":\"affected\",\"version\":\"0\",\"versionType\":\"custom\"}"
    "]}]"};

const std::string packageName {"libmagic-mgc"};

const std::string flatbufferSchema {"scanVulnerabilityCandidate.fbs"};

class DatabaseFeedManagerTests : public ::testing::Test
{
protected:
    DatabaseFeedManagerTests() = default;
    virtual ~DatabaseFeedManagerTests() = default;

    static void SetUpTestSuite()
    {
        std::filesystem::create_directories(DESCRIPTION_DATABASE_DIR);

        std::string schemaStr;
        nlohmann::json jsonExample = nlohmann::json::parse(vulnerabilityCandidateExample);
        bool valid = flatbuffers::LoadFile(flatbufferSchema.c_str(), false, &schemaStr);
        assert(valid == true);
        assert(!jsonExample.empty());

        flatbuffers::Parser parser;
        valid = parser.Parse(schemaStr.c_str());
        assert(valid == true);

        Utils::RocksDBWrapper rocksDBWrapper(ROCKS_DB_PATH);

        for (const auto& item : jsonExample)
        {
            valid = parser.Parse(item.dump().c_str());
            assert(valid == true);

            uint8_t* buf = parser.builder_.GetBufferPointer();
            const size_t flatbufferSize = parser.builder_.GetSize();

            const rocksdb::Slice vulnerabilityCandidate(reinterpret_cast<const char*>(buf), flatbufferSize);
            rocksDBWrapper.put(packageName + "_" + item.at("cveId").get<std::string>(), vulnerabilityCandidate);
        }
    }

    static void TearDownTestSuite()
    {
        pIndexerConnectorMock.reset();
        pPolicyManagerMock.reset();
        pContentRegisterMock.reset();
        pRouterSubscriberMock.reset();
        std::filesystem::remove_all(DESCRIPTION_DATABASE_DIR);
        std::filesystem::remove_all(ROCKS_DB_PATH);
    }
};

#endif // _DATABASE_FEED_MANAGER_TESTS_HPP
