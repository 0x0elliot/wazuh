/*
 * Wazuh databaseFeedManager
 * Copyright (C) 2015, Wazuh Inc.
 * September 22, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "databaseFeedManager_test.h"
#include "MockContentRegister.hpp"
#include "MockIndexerConnector.hpp"
#include "MockPolicyManager.hpp"
#include "MockRouterSubscriber.hpp"
#include "TrampolineContentRegister.hpp"
#include "TrampolineIndexerConnector.hpp"
#include "TrampolinePolicyManager.hpp"
#include "TrampolineRouterSuscribe.hpp"
#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include <string_view>

using ::testing::_;
using ::testing::Return;

constexpr auto COMMON_DATABASE_DIR {"queue/vd"}; //<<Used for all databases

constexpr auto CVEID_TEST_OK {"cveid_test_ok"};
constexpr auto CVEID_TEST_NOT_FOUND {"cveid_test_not_found"};
constexpr auto CVEID_TEST_CORRUPTED {"cveid_test_corrupted"};
const std::string flatbufferSchema {FLATBUFFER_SCHEMAS_DIR "/vulnerabilityCandidate.fbs"};

// Variables used for candidate tests
const std::string msgStr {
    "random_string_:{\"data\":{\"architecture\":\"amd64\",\"checksum\":\"f2cacd7658244c009fc10aef49044865c24a7aff\","
    "\"description\":\"File type determination library using \\\"magic\\\" numbers (compiled magic "
    "file)\",\"format\":\"deb\",\"groups\":\"libs\",\"install_time\":\" \","
    "\"item_id\":\"a8a2353c40a14803efa105c0531d353fd4b6882f\",\"location\":\" "
    "\",\"multiarch\":\"foreign\",\"name\":\"libmagic-mgc\",\"priority\":\"optional\","
    "\"scan_time\":\"2023/09/13 14:01:34\",\"size\":7128,\"source\":\"file\",\"vendor\":\"Ubuntu Developers "
    "<ubuntu-devel-discuss@lists.ubuntu.com>\","
    "\"version\":\"1:5.41-3ubuntu0.1\"},\"operation\":\"INSERTED\",\"type\":\"dbsync_packages\"}"};

const std::string invalidMsgStr {
    "random_string_:{\"data\":{\"architecture\":\"amd64\",\"checksum\":\"f2cacd7658244c009fc10aef49044865c24a7aff\","
    "\"description\":\"File type determination library using \\\"magic\\\" numbers (compiled magic "
    "file)\",\"format\":\"deb\",\"groups\":\"libs\",\"install_time\":\" \","
    "\"item_id\":\"a8a2353c40a14803efa105c0531d353fd4b6882f\",\"location\":\" "
    "\",\"multiarch\":\"foreign\",\"priority\":\"optional\","
    "\"scan_time\":\"2023/09/13 14:01:34\",\"size\":7128,\"source\":\"file\",\"vendor\":\"Ubuntu Developers "
    "<ubuntu-devel-discuss@lists.ubuntu.com>\","
    "\"version\":\"1:5.41-3ubuntu0.1\"},\"operation\":\"INSERTED\",\"type\":\"dbsync_packages\"}"};

const std::string vulnerabilityCandidateExample {
    "[{\"cveId\":\"CVE-1999-1234\",\"defaultStatus\":\"unaffected\",\"platforms\":[\"ubuntu\"],"
    "\"versions\":[{\"status\":\"affected\",\"version\":\"1.0.2\"},{\"lessThan\":\"1.1.5-1\",\"status\":\"affected\","
    "\"version\":\"0\",\"versionType\":\"deb\"},"
    "{\"lessThan\":\"*\",\"status\":\"affected\",\"version\":\"0\",\"versionType\":\"custom\"}]},{\"cveId\":\"CVE-1999-"
    "1235\",\"defaultStatus\":\"unaffected\","
    "\"platforms\":[\"ubuntu\"],\"versions\":[{\"status\":\"affected\",\"version\":\"1.0.2\"},{\"lessThan\":\"1.1.5-"
    "1\",\"status\":\"affected\",\"version\":\"0\","
    "\"versionType\":\"deb\"},{\"lessThan\":\"*\",\"status\":\"affected\",\"version\":\"0\",\"versionType\":\"custom\"}"
    "]}]"};

const std::string packageName {"libmagic-mgc"};

std::vector<char> message(msgStr.begin(), msgStr.end());
std::vector<char> invalidMessage(invalidMsgStr.begin(), invalidMsgStr.end());

// External shared pointers definitions
std::shared_ptr<MockIndexerConnector> spIndexerConnectorMock;
std::shared_ptr<MockPolicyManager> spPolicyManagerMock;
std::shared_ptr<MockContentRegister> spContentRegisterMock;
std::shared_ptr<MockRouterSubscriber> spRouterSubscriberMock;

void DatabaseFeedManagerTest::SetUp()
{
    std::filesystem::create_directories(COMMON_DATABASE_DIR);

    std::string schemaStr;
    nlohmann::json jsonExample = nlohmann::json::parse(vulnerabilityCandidateExample);

    bool valid = flatbuffers::LoadFile(flatbufferSchema.c_str(), false, &schemaStr);
    assert(valid == true);
    assert(!jsonExample.empty());

    flatbuffers::Parser parser;
    valid = parser.Parse(schemaStr.c_str());
    assert(valid == true);

    Utils::RocksDBWrapper rocksDBWrapper(CANDIDATES_DATABASE_PATH);

    for (const auto& item : jsonExample)
    {
        valid = parser.Parse(item.dump().c_str());
        assert(valid == true);

        uint8_t* buf = parser.builder_.GetBufferPointer();
        const size_t flatbufferSize = parser.builder_.GetSize();

        const rocksdb::Slice vulnerabilityCandidate(reinterpret_cast<const char*>(buf), flatbufferSize);
        rocksDBWrapper.put(packageName + "_" + item.at("cveId").get<std::string>(), vulnerabilityCandidate);
    }
};

void DatabaseFeedManagerTest::TearDown()
{
    // Reset shared_ptr owner
    spIndexerConnectorMock.reset();
    spPolicyManagerMock.reset();
    spContentRegisterMock.reset();
    spRouterSubscriberMock.reset();
    std::filesystem::remove_all(COMMON_DATABASE_DIR);
};

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_Ok)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    flatbuffers::FlatBufferBuilder fbBuilder;
    auto vdOriginalData = NSVulnerabilityScanner::CreateVulnerabilityDescriptionDirect(fbBuilder,
                                                                                       999.99,
                                                                                       "classification_test_string",
                                                                                       "description_test_string",
                                                                                       "severity_test_string",
                                                                                       "scoreVersion_test_string",
                                                                                       "reference_test_string");
    fbBuilder.Finish(vdOriginalData);

    {
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DESCRIPTION_DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(fbBuilder.GetBufferPointer()), fbBuilder.GetSize());
        dbWrapper->put(CVEID_TEST_OK, dbValue);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spTrampolineIndexerConnector)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_NO_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation(CVEID_TEST_OK, container));
    EXPECT_FLOAT_EQ(container.data->scoreBase(), 999.99);
    EXPECT_STREQ(container.data->classification()->c_str(), "classification_test_string");
    EXPECT_STREQ(container.data->description()->c_str(), "description_test_string");
    EXPECT_STREQ(container.data->severity()->c_str(), "severity_test_string");
    EXPECT_STREQ(container.data->scoreVersion()->c_str(), "scoreVersion_test_string");
    EXPECT_STREQ(container.data->reference()->c_str(), "reference_test_string");
}

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_NotFound)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    flatbuffers::FlatBufferBuilder fbBuilder;
    auto vdOriginalData = NSVulnerabilityScanner::CreateVulnerabilityDescriptionDirect(fbBuilder,
                                                                                       999.99,
                                                                                       "classification_test_string",
                                                                                       "description_test_string",
                                                                                       "severity_test_string",
                                                                                       "scoreVersion_test_string",
                                                                                       "reference_test_string");
    fbBuilder.Finish(vdOriginalData);

    {
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DESCRIPTION_DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(fbBuilder.GetBufferPointer()), fbBuilder.GetSize());
        dbWrapper->put(CVEID_TEST_NOT_FOUND, dbValue);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spTrampolineIndexerConnector)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation("cveid_any", container),
                 std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_Corrupted)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DESCRIPTION_DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        dbWrapper->put(CVEID_TEST_CORRUPTED, dbValue);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spTrampolineIndexerConnector)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation(CVEID_TEST_CORRUPTED, container),
                 std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityCandidatesSuccess)
{
    ScanContext context;
    context.build(message);

    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap)};

    std::vector<std::vector<uint8_t>> vulnerabilities;

    pDatabaseFeedManager->getVulnerabilitiesCandidates(
        "cnaName",
        context,
        [&vulnerabilities](const char* data, const size_t size) -> bool
        {
            bool valid = false;
            uint8_t ret[size];
            std::memcpy(ret, data, size);
            flatbuffers::Verifier verifier(ret, size);
            if (NSVulnerabilityScanner::VerifyScanVulnerabilityCandidateBuffer(verifier))
            {
                valid = true;
                vulnerabilities.push_back(std::vector<uint8_t>(ret, ret + size));
            }

            return valid;
        });

    flatbuffers::Verifier verifier1(vulnerabilities[0].data(), vulnerabilities[0].size());
    if (NSVulnerabilityScanner::VerifyScanVulnerabilityCandidateBuffer(verifier1))
    {
        const NSVulnerabilityScanner::ScanVulnerabilityCandidate* fb =
            NSVulnerabilityScanner::GetScanVulnerabilityCandidate(vulnerabilities[0].data());
        EXPECT_EQ(fb->cveId()->str(), "CVE-1999-1234");
    }

    flatbuffers::Verifier verifier2(vulnerabilities[1].data(), vulnerabilities[1].size());
    if (NSVulnerabilityScanner::VerifyScanVulnerabilityCandidateBuffer(verifier2))
    {
        const NSVulnerabilityScanner::ScanVulnerabilityCandidate* fb =
            NSVulnerabilityScanner::GetScanVulnerabilityCandidate(vulnerabilities[1].data());
        EXPECT_EQ(fb->cveId()->str(), "CVE-1999-1235");
    }
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityCandidatesContextEmpty)
{
    ScanContext context;

    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap)};

    std::vector<std::vector<uint8_t>> vulnerabilities;

    pDatabaseFeedManager->getVulnerabilitiesCandidates(
        "cnaName",
        context,
        [&vulnerabilities](const char* data, const size_t size) -> bool
        {
            bool valid = false;
            uint8_t ret[size];
            std::memcpy(ret, data, size);
            flatbuffers::Verifier verifier(ret, size);
            if (NSVulnerabilityScanner::VerifyScanVulnerabilityCandidateBuffer(verifier))
            {
                valid = true;
                vulnerabilities.push_back(std::vector<uint8_t>(ret, ret + size));
            }

            return valid;
        });

    EXPECT_EQ(vulnerabilities.empty(), true);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityCandidatesNoPackageName)
{
    ScanContext context;
    context.build(invalidMessage);

    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap)};

    std::vector<std::vector<uint8_t>> vulnerabilities;

    pDatabaseFeedManager->getVulnerabilitiesCandidates(
        "cnaName",
        context,
        [&vulnerabilities](const char* data, const size_t size) -> bool
        {
            bool valid = false;
            uint8_t ret[size];
            std::memcpy(ret, data, size);
            flatbuffers::Verifier verifier(ret, size);
            if (NSVulnerabilityScanner::VerifyScanVulnerabilityCandidateBuffer(verifier))
            {
                valid = true;
                vulnerabilities.push_back(std::vector<uint8_t>(ret, ret + size));
            }

            return valid;
        });

    EXPECT_EQ(vulnerabilities.empty(), true);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_ValidData)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate saved data, store before variable instance.
    {
        std::string key_dummy {"CVE-2023-2609"};
        flatbuffers::FlatBufferBuilder builder;
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(REMEDIATIONS_DATABASE_PATH);

        std::vector<flatbuffers::Offset<flatbuffers::String>> updates_vec;
        updates_vec.push_back(builder.CreateString("KB2023"));
        auto updates = builder.CreateVector(updates_vec);
        auto dummy = CreateRemediationInfo(builder, updates);
        builder.Finish(dummy);

        rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()), builder.GetSize());
        dbWrapper->put(key_dummy, value);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp)};

    // Variables setup
    std::string_view cveId {"CVE-2023-2609"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Asserts
    ASSERT_NO_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation));
    ASSERT_STREQ(dtoVulnRemediation.data->updates()->Get(0)->str().c_str(), "KB2023");
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_DataNotFound)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp)};

    // Variables setup
    std::string_view cveId {"CVE-2023-5678"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Assert
    ASSERT_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation), std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_InvalidData)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate corrupted data, store before variable instance.
    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(REMEDIATIONS_DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        dbWrapper->put("CVE-2023-2609", dbValue);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp)};

    // Variables setup
    std::string_view cveId {"CVE-2023-2609"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Assert
    ASSERT_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation), std::runtime_error);
}
