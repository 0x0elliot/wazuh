#ifndef __SEND_REPORT_HPP
#define __SEND_REPORT_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketClient.hpp"
#include "vulnerabilityScanner.hpp"

const std::string LOCALFILE_MQ {"1"};
extern int SOCKET_WAIT;

/**
 * @brief Class in charge to send formatted report messages.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TSendReport final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<ReportDispatcher> m_reportDispatcher;

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new Send Report object
     *
     * @param reportDispatcher Report queue instance.
     */
    explicit TSendReport(std::shared_ptr<ReportDispatcher> reportDispatcher)
        : m_reportDispatcher(std::move(reportDispatcher))
    {
    }
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        for (const auto& [key, value] : data->m_alerts)
        {
            try
            {
                std::ostringstream oss;
                std::string agentId = std::string(data->agentId());

                // 1:[001] (agent_name) ip->location:
                oss << LOCALFILE_MQ << ":"
                    << "[" << agentId << "] (" << std::string(data->agentName()) << ") " << std::string(data->agentIp())
                    << "->"
                    << "vulnerability-detector"
                    << ":"
                    // Vulnerability report.
                    << value.dump().c_str();

                // The report is sent in another thread.
                m_reportDispatcher->push(oss.str());

                if (data->affectedComponentType() == AffectedComponentType::Package)
                {
                    std::string packageName = std::string(data->packageName());
                    logDebug2(WM_VULNSCAN_LOGTAG,
                              "Vulnerability %s report for agent ID %s, package: %s, cve: %s",
                              data->getType() == ScannerType::PackageInsert ? "detected" : "solved",
                              agentId.c_str(),
                              data->packageName().data(),
                              key.c_str());
                }
                else if (data->affectedComponentType() == AffectedComponentType::Os)
                {
                    logDebug2(WM_VULNSCAN_LOGTAG,
                              "Vulnerability report for agent ID %s, OS: %s, cve: %s",
                              agentId.c_str(),
                              std::string(data->osName()).c_str(),
                              key.c_str());
                }
                else
                {
                    logWarn(WM_VULNSCAN_LOGTAG,
                            "Vulnerability report for agent ID %s, cve: %s",
                            agentId.c_str(),
                            key.c_str());
                }
            }
            catch (...)
            {
                logWarn(WM_VULNSCAN_LOGTAG, "Couldn't send vulnerability JSON report for %s:", key.c_str());
            }
        }
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using SendReport = TSendReport<>;

#endif // __SEND_REPORT_HPP
