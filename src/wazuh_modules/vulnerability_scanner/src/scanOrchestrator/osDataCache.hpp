/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Nov 23, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _OS_DATA_CACHE_HPP
#define _OS_DATA_CACHE_HPP

#include "cacheLRU.hpp"
#include "singleton.hpp"
#include <shared_mutex>
#include <string>

/**
 * @brief Os structure.
 */
struct Os final
{
    std::string hostName;
    std::string architecture;
    std::string name;
    std::string version;
    std::string codeName;
    std::string majorVersion;
    std::string minorVersion;
    std::string patch;
    std::string build;
    std::string platform;
    std::string sysName;
    std::string release;
    std::string osVersion;
    std::string osRelease;
    std::string osDisplayVersion;
};

/**
 * @brief OsDataCache class.
 */
class OsDataCache final : public Singleton<OsDataCache>
{
private:
    LRUCache<std::string, Os> m_osData {1000};
    std::shared_mutex m_mutex;

public:
    /**
     * @brief This method returns the os data.
     *
     * @return Os
     */
    Os getOsData(const std::string& agentId)
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        auto value = m_osData.getValue(agentId);
        return value ? *value : Os();
    }

    /**
     * @brief This method sets the os data.
     *
     * @param osData
     */
    void setOsData(const std::string& agentId, const Os& osData)
    {
        std::lock_guard<std::shared_mutex> lock(m_mutex);
        m_osData.insertKey(agentId, osData);
    }
};

#endif // _OS_DATA_CACHE_HPP
