/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _SCAN_ORCHESTRATOR_HPP
#define _SCAN_ORCHESTRATOR_HPP

#include "factoryOrchestrator.hpp"
#include "flatbuffers/include/syscollector_deltas_generated.h"
#include "flatbuffers/include/syscollector_synchronization_generated.h"
#include "indexerConnector.hpp"
#include "logging_helper.h"
#include "scanContext.hpp"
#include <functional>
#include <memory>
#include <string>
#include <variant>
#include <vector>

/**
 * @brief ScanOrchestrator class.
 *
 */
class ScanOrchestrator final
{
public:
    /**
     * @brief Class constructor.
     *
     * @param indexerConnector Indexer connector.
     */
    // LCOV_EXCL_START
    explicit ScanOrchestrator(std::shared_ptr<IndexerConnector>& indexerConnector)
        : m_indexerConnector(indexerConnector)
    {
        m_osOrchestration = FactoryOrchestrator::create(ScannerType::Os);
        m_packageInsertOrchestration = FactoryOrchestrator::create(ScannerType::PackageInsert);
        // m_packageDeleteOrchestration = FactoryOrchestrator::create(ScannerType::PackageDelete);
        // m_hotfixInsertOrchestration = FactoryOrchestrator::create(ScannerType::HotfixInsert);
        // m_hotfixDeleteOrchestration = FactoryOrchestrator::create(ScannerType::HotfixDelete);
    }
    ~ScanOrchestrator() = default;
    // LCOV_EXCL_STOP
    /**
     * @brief Runs orchestrator, decoding and building context.
     *
     * @param data Variant with delta or sync message.
     */
    void run(std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*>& data);

private:
    /**
     * @brief Indexer connector.
     *
     */
    std::shared_ptr<IndexerConnector> m_indexerConnector;

    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_osOrchestration;
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_packageInsertOrchestration;
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_packageDeleteOrchestration;
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_hotfixInsertOrchestration;
    std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> m_hotfixDeleteOrchestration;
};

#endif // _SCAN_ORCHESTRATOR_HPP
