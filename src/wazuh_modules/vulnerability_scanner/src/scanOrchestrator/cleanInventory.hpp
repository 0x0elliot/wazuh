/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Jun 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _CLEAN_INVENTORY_HPP
#define _CLEAN_INVENTORY_HPP

#include "../policyManager/policyManager.hpp"
#include "chainOfResponsability.hpp"
#include "inventorySync.hpp"
#include "rocksDBWrapper.hpp"
#include "scanContext.hpp"
#include "timeHelper.h"

/**
 * @brief TCleanInventory class.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext,
         typename TAbstractHandler = AbstractHandler<std::shared_ptr<TScanContext>>>
class TCleanInventory final
    : public AbstractHandler<std::shared_ptr<TScanContext>>
    , public TInventorySync<TScanContext>
{
private:
    std::shared_ptr<TAbstractHandler> m_subOrchestration;

public:
    // LCOV_EXCL_START
    /**
     * @brief CleanInventory constructor.
     *
     * @param inventoryDatabase Inventory database.
     * @param subOrchestration Sub-orchestration to publish changes to the indexer.
     */
    explicit TCleanInventory(Utils::RocksDBWrapper& inventoryDatabase,
                             std::shared_ptr<TAbstractHandler> subOrchestration)
        : m_subOrchestration(std::move(subOrchestration))
        , TInventorySync<TScanContext>(inventoryDatabase)
    {
    }
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        std::string key;
        key.append(data->agentNodeName());
        key.append("_");

        for (const auto& type : {AffectedComponentType::Os, AffectedComponentType::Package})
        {
            for (const auto& dbQuery :
                 TInventorySync<TScanContext>::m_inventoryDatabase.seek(key, AFFECTED_COMPONENT_COLUMNS.at(type)))
            {
                auto listCve = Utils::split(dbQuery.second.ToString(), ',');
                for (const auto& cve : listCve)
                {
                    data->m_isInventoryEmpty = false;
                    std::string elementKey;
                    elementKey.append(dbQuery.first);
                    elementKey.append("_");
                    elementKey.append(cve);

                    // We use elementKey as the id of the element, because it is unique.
                    auto context = std::make_shared<TScanContext>();
                    context->m_elements.emplace(elementKey,
                                                TInventorySync<TScanContext>::buildElement("DELETED", elementKey));
                    m_subOrchestration->handleRequest(std::move(context));
                }
                logDebug2(WM_VULNSCAN_LOGTAG, "Deleting all agent vulnerabilities key: %s", dbQuery.first.c_str());
                TInventorySync<TScanContext>::m_inventoryDatabase.delete_(dbQuery.first,
                                                                          AFFECTED_COMPONENT_COLUMNS.at(type));
            }
        }

        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using CleanInventory = TCleanInventory<>;

#endif // _CLEAN_INVENTORY_HPP
