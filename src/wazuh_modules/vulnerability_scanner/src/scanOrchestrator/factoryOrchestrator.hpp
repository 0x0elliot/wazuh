/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _FACTORY_ORCHESTRATOR_HPP
#define _FACTORY_ORCHESTRATOR_HPP

#include "chainOfResponsability.hpp"
#include "inventorySync.hpp"
#include "osScanner.hpp"
#include "packageScanner.hpp"
#include "resultIndexer.hpp"
#include <iostream>
#include <memory>

/**
 * @brief FactoryOrchestrator class.
 *
 */
class FactoryOrchestrator final
{
private:
    FactoryOrchestrator() = default;

public:
    /**
     * @brief Creates an orchestrator and returns it.
     *
     * @param type Scanner type.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    static std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> create(ScannerType type)
    {

        std::shared_ptr<AbstractHandler<std::shared_ptr<ScanContext>>> orchestration;
        if (type == ScannerType::PackageInsert)
        {
            orchestration = std::make_shared<PackageScanner>();
            // orchestration->setLast(std::make_shared<DetailsAugmentation>());
        }
        else if (type == ScannerType::PackageDelete)
        {
            // orchestration = std::make_shared<DeletePackageVulnerabilities>();
        }
        else if (type == ScannerType::HotfixInsert)
        {
            // orchestration = std::make_shared<HotfixScanner>();
        }
        else if (type == ScannerType::HotfixDelete)
        {
            // orchestration = std::make_shared<DeleteHotfixVulnerabilities>();
        }
        else if (type == ScannerType::Os)
        {
            orchestration = std::make_shared<OsScanner>();
            // orchestration->setLast(std::make_shared<CheckRemediations>());
        }
        else
        {
            throw std::runtime_error("Invalid scanner type");
        }

        orchestration->setLast(std::make_shared<InventorySync>());
        orchestration->setLast(std::make_shared<ResultIndexer>());
        return orchestration;
    }
};

#endif // _FACTORY_ORCHESTRATOR_HPP
