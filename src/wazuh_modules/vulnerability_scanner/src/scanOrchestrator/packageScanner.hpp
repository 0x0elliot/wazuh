/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _PACKAGE_SCANNER_HPP
#define _PACKAGE_SCANNER_HPP

#include "chainOfResponsability.hpp"
#include "databaseFeedManager.hpp"
#include "scanContext.hpp"
#include "versionMatcher/versionMatcher.hpp"
#include <iostream>

/**
 * @brief PackageScanner class.
 *
 */
class PackageScanner final : public AbstractHandler<std::shared_ptr<ScanContext>>
{
private:
    std::shared_ptr<DatabaseFeedManager> m_databaseFeedManager;

public:
    // LCOV_EXCL_START
    /**
     * @brief PackageScanner constructor.
     *
     * @param databaseFeedManager Database feed manager.
     */
    explicit PackageScanner(std::shared_ptr<DatabaseFeedManager>& databaseFeedManager)
        : m_databaseFeedManager(databaseFeedManager)
    {
    }
    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<ScanContext> handleRequest(std::shared_ptr<ScanContext> data) override
    {
        const std::string packageName {Utils::toLowerCase(std::string(data->packageName()))};

        logDebug1(WM_VULNSCAN_LOGTAG, "Scanning package: %s", packageName.c_str());
        m_databaseFeedManager->getVulnerabilitiesCandidates(
            "nvd",
            packageName,
            [&](const NSVulnerabilityScanner::ScanVulnerabilityCandidate& callbackData)
            {
                for (const auto& version : *callbackData.versions())
                {
                    auto upperLimitMatch = false;
                    auto lowerLimitMatch = false;

                    const std::string packageVersion {data->packageVersion()};
                    std::string versionString {version->version() ? version->version()->str() : ""};
                    std::string versionStringLessThan {version->lessThan() ? version->lessThan()->str() : ""};
                    std::string versionStringLessThanOrEqual {
                        version->lessThanOrEqual() ? version->lessThanOrEqual()->str() : ""};

                    if (!versionString.empty())
                    {
                        if (versionString.compare("0") == 0)
                        {
                            lowerLimitMatch = true;
                        }
                        else
                        {
                            lowerLimitMatch = VersionMatcher::compare(packageVersion, versionString) >= 0;
                        }
                    }

                    if (!versionStringLessThan.empty() || !versionStringLessThanOrEqual.empty())
                    {
                        if (!versionStringLessThan.empty())
                        {
                            upperLimitMatch = VersionMatcher::compare(packageVersion, versionStringLessThan) < 0;
                        }
                        else if (!versionStringLessThanOrEqual.empty())
                        {
                            upperLimitMatch =
                                VersionMatcher::compare(packageVersion, versionStringLessThanOrEqual) <= 0;
                        }
                    }
                    else
                    {
                        upperLimitMatch = true;
                    }

                    logDebug2(WM_VULNSCAN_LOGTAG,
                              "Package: %s, Version: %s, CVE: %s, LLM: %s, ULM: %s, GTE: %s, LT: %s, LTE: %s",
                              packageName.c_str(),
                              packageVersion.c_str(),
                              callbackData.cveId()->str().c_str(),
                              lowerLimitMatch ? "true" : "false",
                              upperLimitMatch ? "true" : "false",
                              versionString.c_str(),
                              versionStringLessThan.c_str(),
                              versionStringLessThanOrEqual.c_str());

                    if (upperLimitMatch && lowerLimitMatch)
                    {
                        data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                        return true;
                    }
                }
                return false;
            });

        if (!data->m_elements.empty())
        {
            return AbstractHandler<std::shared_ptr<ScanContext>>::handleRequest(data);
        }
        else
        {
            return nullptr;
        }
    }
    // LCOV_EXCL_STOP
};

#endif // _PACKAGE_SCANNER_HPP
