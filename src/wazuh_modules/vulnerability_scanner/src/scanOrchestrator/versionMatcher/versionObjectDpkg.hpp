/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_OBJECT_DPKG_HPP
#define _VERSION_OBJECT_DPKG_HPP

#include "iVersionObjectInterface.hpp"
#include <iostream>
#include <memory>
#include <regex>
#include <string>

/**
 * @brief dpkgVersion data struct.
 *
 */
struct dpkgVersion
{
    uint32_t epoch;       ///< Epoch.
    std::string version;  ///< Version.
    std::string revision; ///< Revision.
};

/**
 * @brief VersionObjectDpkg class.
 *
 */
class VersionObjectDpkg final : public IVersionObject
{
private:
    static std::regex m_parserRegex;
    uint32_t m_epoch;
    std::string m_version;
    std::string m_revision;

public:
    /**
     * @brief Static method to match a version string to a dpkgVersion object.
     *
     * @param version version string to match.
     * @param output dpkgVersion object to store the result.
     * @return true/false according to match condition.
     */
    static bool match(const std::string& version, dpkgVersion& output)
    {
        std::smatch parserMatches;
        if ((std::regex_match(version, parserMatches, m_parserRegex) == false) || (parserMatches.size() != 3))
        {
            return false;
        }

        output.epoch = static_cast<uint32_t>(std::stoul(parserMatches.str(1)));
        output.version = parserMatches.str(2);
        output.revision = parserMatches.str(3);

        return true;
    }
    /**
     * @brief Constructor.
     *
     * @param version version SemVer object.
     */
    explicit VersionObjectDpkg(const dpkgVersion& version)
        : m_epoch {version.epoch}
        , m_version {version.version}
        , m_revision {version.revision}
    {
    }
    // LCOV_EXCL_START
    ~VersionObjectDpkg() override = default;
    // LCOV_EXCL_STOP

    /**
     * @brief Returns the VersionObjectType of this class.
     *
     * @return VersionObjectType.
     */
    VersionObjectType getType() override
    {
        return VersionObjectType::DPKG;
    }

    /**
     * @brief Comparison operator ==.
     *
     * @param b comparison rhs object.
     * @return true/false according to equality condition.
     */
    bool operator==(const IVersionObject& b) const override
    {
        const auto* pB = dynamic_cast<const VersionObjectDpkg*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }
        return (m_epoch == pB->m_epoch && m_version.compare(pB->m_version) == 0 &&
                m_revision.compare(pB->m_revision) == 0);
    }

    /**
     * @brief Comparison operator <.
     *
     * @param b comparison rhs object.
     * @return true/false according to less than condition.
     */
    bool operator<(const IVersionObject& b) const override
    {
        const auto* pB = dynamic_cast<const VersionObjectDpkg*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }

        if (m_epoch < pB->m_epoch)
        {
            return true;
        }

        if (!m_version.empty() && pB->m_version.empty())
        {
            return true;
        }
        else if (!m_version.empty() && !pB->m_version.empty())
        {
            if (m_version.compare(pB->m_version) < 0)
            {
                return true;
            }
        }

        return false;
    }
};

#endif // _VERSION_OBJECT_DPKG_HPP
