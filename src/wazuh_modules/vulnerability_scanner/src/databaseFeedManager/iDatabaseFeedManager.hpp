/*
 * Wazuh Vulnerability scanner
 * Copyright (C) 2015, Wazuh Inc.
 * September 21, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _IDATABASE_FEED_MANAGER_HPP
#define _IDATABASE_FEED_MANAGER_HPP

#include "rocksDBWrapper.hpp"

const std::string rocksDBPathName {"./test.db"};

/**
 * @brief IDatabaseFeedManager class.
 *
 */
class IDatabaseFeedManager
{
protected:
    /**
     * @brief Get the Vulnerabilities Candidates information.
     *
     * @param cnaName RocksDB table identifier.
     * @param context Scan context structure.
     * @param callback Store vulnerability data.
     */
    void getVulnerabilitiesCandidates(const std::string& cnaName,
                                      const ScanContext& context,
                                      const std::function<bool(const char* data, const size_t size)>& callback)
    {
        std::string packageName;
        std::string rocksDBKey;

        // TODO: Process cnaName to get the required database path, now harcoded in rocksDBPathName

        try
        {
            Utils::RocksDBWrapper rocksDBWrapper(rocksDBPathName);
            if (!context.contextData.empty())
            {
                try
                {
                    packageName = context.contextData.at("data").at("name");
                }
                catch (...)
                {
                }

                if (!packageName.empty())
                {
                    for (const auto& [key, value] : rocksDBWrapper.seek(packageName))
                    {
                        if (!callback(reinterpret_cast<const char*>(value.data()), value.size()))
                        {
                            throw std::runtime_error("Error");
                        }
                    }
                }
            }
        }
        catch (...)
        {
        }
    }

public:
    /**
     * @brief Updates scheduler interval.
     *
     * @param data Data containing the interval.
     */
    virtual void update(nlohmann::json& data) = 0;
};

#endif // _IDATABASE_FEED_MANAGER_HPP
