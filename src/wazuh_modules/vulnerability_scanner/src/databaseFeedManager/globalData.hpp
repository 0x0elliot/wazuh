
#ifndef _GLOBALDATA_HPP
#define _GLOBALDATA_HPP

#include "json.hpp"
#include "singleton.hpp"
#include <mutex>
#include <shared_mutex>

// Singleton class
class GlobalData final : public Singleton<GlobalData>
{
    mutable std::shared_mutex m_mutex;
    nlohmann::json m_vendorMaps;
    nlohmann::json m_osCpeMaps;

public:
    void vendorMaps(const nlohmann::json& vendor)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_vendorMaps = vendor;
    }

    void osCpeMaps(const nlohmann::json& osCpe)
    {
        std::unique_lock<std::shared_mutex> lock(m_mutex);
        m_osCpeMaps = osCpe;
    }

    nlohmann::json vendorMaps() const
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        return m_vendorMaps;
    }

    nlohmann::json osCpeMaps() const
    {
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        return m_osCpeMaps;
    }
};

#endif // _GLOBALDATA_HPP
