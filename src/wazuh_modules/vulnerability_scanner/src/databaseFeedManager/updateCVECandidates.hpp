/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * Oct 6, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _UPDATE_CVE_CANDIDATES_HPP
#define _UPDATE_CVE_CANDIDATES_HPP

#include "cve5_generated.h"
#include "flatbuffers/flatbuffers.h"
#include "rocksDBWrapper.hpp"
#include "vulnerabilityCandidate_generated.h"

const std::unordered_map<std::string, NSVulnerabilityScanner::Status> VERSION_STATUS_MAP {
    {"unaffected", NSVulnerabilityScanner::Status::Status_unaffected},
    {"affected", NSVulnerabilityScanner::Status::Status_affected},
    {"unknown", NSVulnerabilityScanner::Status::Status_unknown}};

constexpr auto CANDIDATES_DATABASE_PATH {"queue/vd/candidates"};

/**
 * @brief Helper class to centralize the map lookup and dynamic fill.
 *
 */
class CandidatesDBHelper final
{
public:
    /**
     * @brief Looks for the database in the map and adds it if it does not exist. In case of failIfNotExists, it throws
     * an exception if the database does not exist.
     *
     * @param shortName Name of the database.
     * @param map Candidates database map.
     * @param failIfNotExists Flag to indicate if it should throw an exception when the database does not exist.
     */
    void static findAndOpen(const std::string& shortName,
                            std::map<std::string, std::unique_ptr<Utils::RocksDBWrapper>>& map,
                            bool failIfNotExists = false)
    {
        if (map.find(shortName) == map.end())
        {
            std::string dbPath {CANDIDATES_DATABASE_PATH + std::string("/") + shortName};

            if (failIfNotExists)
            {
                if (!std::filesystem::exists(std::filesystem::path(dbPath)))
                {
                    throw std::runtime_error("Database " + dbPath + " does not exist");
                }
            }

            map.emplace(shortName, std::make_unique<Utils::RocksDBWrapper>(dbPath));
        }
    }
};

/**
 * @brief UpdateCVECandidates class.
 *
 */
class UpdateCVECandidates final
{
public:
    /**
     * @brief Inserts the candidate data into the corresponding database.
     *
     * @param cve5Flatbuffer CVE5 Flatbuffer.
     * @param dbMap map with rocksDB instances.
     */
    static void storeVulnerabilityCandidate(const cve_v5::Entry* cve5Flatbuffer,
                                            std::map<std::string, std::unique_ptr<Utils::RocksDBWrapper>>& dbMap)
    {
        if (!cve5Flatbuffer || !cve5Flatbuffer->containers())
        {
            std::cerr << "Empty cve5Flatbuffer or containers.\n";
            return;
        }

        flatbuffers::FlatBufferBuilder builder;

        const auto cveId {cve5Flatbuffer->cveMetadata()->cveId()};

        auto candidateLambda = [&](const cve_v5::Affected* affected, const std::string& shortName)
        {
            if (!affected->product())
            {
                std::cerr << "Empty product.\n";
                return;
            }

            // Versions array
            std::vector<flatbuffers::Offset<NSVulnerabilityScanner::Version>> versionFBArray;
            if (affected->versions())
            {
                for (const auto& versionElement : *affected->versions())
                {
                    NSVulnerabilityScanner::Status status;

                    if (versionElement->status() &&
                        VERSION_STATUS_MAP.find(versionElement->status()->str()) != VERSION_STATUS_MAP.end())
                    {
                        status = VERSION_STATUS_MAP.at(versionElement->status()->str());
                    }

                    auto versionFB = NSVulnerabilityScanner::CreateVersionDirect(
                        builder,
                        status,
                        versionElement->version() ? versionElement->version()->c_str() : nullptr,
                        versionElement->lessThan() ? versionElement->lessThan()->c_str() : nullptr,
                        versionElement->lessThanOrEqual() ? versionElement->lessThanOrEqual()->c_str() : nullptr,
                        versionElement->versionType() ? versionElement->versionType()->c_str() : nullptr);

                    versionFBArray.push_back(versionFB);
                }
            }

            // Platforms array
            std::vector<flatbuffers::Offset<flatbuffers::String>> platformsVec;
            if (affected->platforms())
            {
                for (const auto& platform : *affected->platforms())
                {
                    platformsVec.push_back(builder.CreateString(platform->str()));
                }
            }

            NSVulnerabilityScanner::Status defaultStatus;

            if (affected->defaultStatus() &&
                VERSION_STATUS_MAP.find(affected->defaultStatus()->str()) != VERSION_STATUS_MAP.end())
            {
                defaultStatus = VERSION_STATUS_MAP.at(affected->defaultStatus()->str());
            }

            auto candidate = NSVulnerabilityScanner::CreateScanVulnerabilityCandidateDirect(
                builder, cveId->c_str(), defaultStatus, &platformsVec, &versionFBArray);

            builder.Finish(candidate);

            const uint8_t* buffer = builder.GetBufferPointer();
            size_t flatbufferSize = builder.GetSize();

            const rocksdb::Slice VulnerabilityCandidateSlice(reinterpret_cast<const char*>(buffer), flatbufferSize);

            auto key = affected->product()->str() + "_" + cveId->str();

            dbMap.at(shortName)->put(key, VulnerabilityCandidateSlice);
        };

        if (cve5Flatbuffer->containers()->adp())
        {
            for (const auto& adp : *cve5Flatbuffer->containers()->adp())
            {
                if (!adp->providerMetadata() || !adp->providerMetadata()->shortName() || !adp->affected())
                {
                    std::cerr << "Empty providerMetadata, shortName or affected.\n";
                    continue;
                }

                auto shortName = adp->providerMetadata()->shortName()->str();

                CandidatesDBHelper::findAndOpen(shortName, dbMap);

                for (const auto& affected : *adp->affected())
                {
                    candidateLambda(affected, shortName);
                }
            }
        }

        if (cve5Flatbuffer->containers()->cna())
        {
            auto cna = cve5Flatbuffer->containers()->cna();

            if (!cna->providerMetadata() || !cna->providerMetadata()->shortName() || !cna->affected())
            {
                std::cerr << "Empty providerMetadata, shortName or affected.\n";
                return;
            }

            auto shortName = cna->providerMetadata()->shortName()->str();

            CandidatesDBHelper::findAndOpen(shortName, dbMap);

            for (const auto& affected : *cna->affected())
            {
                candidateLambda(affected, shortName);
            }
        }
    }
};

#endif // _UPDATE_CVE_CANDIDATES_HPP
