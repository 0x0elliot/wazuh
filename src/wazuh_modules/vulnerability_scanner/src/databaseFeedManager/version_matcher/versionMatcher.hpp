/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_MATCHER_HPP
#define _VERSION_MATCHER_HPP

#include "iVersionObjectInterface.hpp"
#include "versionObjectCalVer.hpp"
#include "versionObjectMajorMinor.hpp"
#include "versionObjectPEP440.hpp"
#include "versionObjectSemVer.hpp"
#include <iostream>
#include <memory>
#include <regex>
#include <string>

/**
 * @brief VersionMatcher class.
 *
 */
class VersionMatcher final
{
private:
    /**
     * @brief Inserts a translation entry in a rocksdb database.
     *
     * @param version string version item to create object from
     * @return std::shared_ptr<IVersionObject>
     */
    static std::shared_ptr<IVersionObject> createVersionObject(const std::string& version, VersionObjectType type)
    {
        switch (type)
        {
            default: throw std::runtime_error {"Error creating VersionObject. Invalid type"};

            case VersionObjectType::Unspecified:
                try
                {
                    return std::make_shared<VersionObjectCalVer>(version);
                }
                catch (const std::runtime_error& e)
                {
                    try
                    {
                        return std::make_shared<VersionObjectPEP440>(version);
                    }
                    catch (const std::runtime_error& e)
                    {
                        try
                        {
                            return std::make_shared<VersionObjectMajorMinor>(version);
                        }
                        catch (const std::runtime_error& e)
                        {
                            try
                            {
                                return std::make_shared<VersionObjectSemVer>(version);
                            }
                            catch (const std::runtime_error& e)
                            {
                                throw std::runtime_error {"Error creating VersionObject. Unrecognized type"};
                            }
                        }
                    }
                }

            case VersionObjectType::CalVer:
                try
                {
                    return std::make_shared<VersionObjectCalVer>(version);
                }
                catch (const std::runtime_error& e)
                {
                    throw std::runtime_error {
                        "Error creating VersionObject. Version string dont match the type specified"};
                }

            case VersionObjectType::PEP440:
                try
                {
                    return std::make_shared<VersionObjectPEP440>(version);
                }
                catch (const std::runtime_error& e)
                {
                    throw std::runtime_error {
                        "Error creating VersionObject. Version string dont match the type specified"};
                }

            case VersionObjectType::MajorMinor:
                try
                {
                    return std::make_shared<VersionObjectMajorMinor>(version);
                }
                catch (const std::runtime_error& e)
                {
                    throw std::runtime_error {
                        "Error creating VersionObject. Version string dont match the type specified"};
                }

            case VersionObjectType::SemVer:
                try
                {
                    return std::make_shared<VersionObjectSemVer>(version);
                }
                catch (const std::runtime_error& e)
                {
                    throw std::runtime_error {
                        "Error creating VersionObject. Version string dont match the type specified"};
                }
        }
    }

public:
    /**
     * @brief Inserts a translation entry in a rocksdb database.
     *
     * @param versionA string version item A to compare
     * @param versionB string version item B to compare
     * @param type VersionObjectType of the version strings A and B to compare.
     * @return int
     */
    static int compare(const std::string versionA,
                       const std::string versionB,
                       VersionObjectType type = VersionObjectType::Unspecified)
    {
        auto pVersionObjectA = createVersionObject(versionA, type);
        auto pVersionObjectB = createVersionObject(versionB, type);

        if (pVersionObjectA->getType() != pVersionObjectB->getType())
        {
            throw std::runtime_error {"Error comparing VersionObjects. VersionObjects types are not equal"};
        }

        if (*pVersionObjectA == *pVersionObjectB)
        {
            return 0;
        }
        else if (*pVersionObjectA < *pVersionObjectB)
        {
            return -1;
        }
        else
        {
            return 1;
        }
    }
};

#endif // _VERSION_MATCHER_HPP
