/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_OBJECT_MAJORMINOR_HPP
#define _VERSION_OBJECT_MAJORMINOR_HPP

#include "iVersionObjectInterface.hpp"
#include <iostream>
#include <memory>
#include <regex>
#include <string>

/**
 * @brief VersionObjectMajorMinor class.
 *
 */
class VersionObjectMajorMinor final : public IVersionObject
{
private:
    static std::regex parserRegex;
    uint32_t major;
    uint32_t minor;

public:
    /**
     * @brief Constructor.
     *
     * @param version version string to create object from.
     */
    VersionObjectMajorMinor(const std::string& version)
    {
        std::smatch parserMatches;
        if ((std::regex_match(version, parserMatches, parserRegex) == false) || (parserMatches.size() != 3))
        {
            throw std::runtime_error {"Error creating " + std::string(typeid(*this).name())};
        }
        major = static_cast<uint32_t>(std::stoul(parserMatches.str(1)));
        minor = static_cast<uint32_t>(std::stoul(parserMatches.str(2)));
    }

    virtual ~VersionObjectMajorMinor() = default;

    /**
     * @brief Returns the VersionObjectType of this class.
     *
     * @return VersionObjectType.
     */
    VersionObjectType getType()
    {
        return VersionObjectType::MajorMinor;
    }

    /**
     * @brief Comparison operator ==.
     *
     * @param b comparison rhs object.
     * @return true/false according to equality condition.
     */
    bool operator==(const IVersionObject& b) const
    {
        const VersionObjectMajorMinor* pB = dynamic_cast<const VersionObjectMajorMinor*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }
        return (major == pB->major && minor == pB->minor);
    }

    /**
     * @brief Comparison operator <.
     *
     * @param b comparison rhs object.
     * @return true/false according to less than condition.
     */
    bool operator<(const IVersionObject& b) const
    {
        const VersionObjectMajorMinor* pB = dynamic_cast<const VersionObjectMajorMinor*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }

        if (major < pB->major)
        {
            return true;
        }
        else if (major > pB->major)
        {
            return false;
        }

        return minor < pB->minor;
    }
};

#endif // _VERSION_OBJECT_MAJORMINOR_HPP
