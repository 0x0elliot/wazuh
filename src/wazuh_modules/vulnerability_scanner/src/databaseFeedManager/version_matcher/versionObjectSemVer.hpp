/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_OBJECT_SEMVER_HPP
#define _VERSION_OBJECT_SEMVER_HPP

#include "iVersionObjectInterface.hpp"
#include <iostream>
#include <memory>
#include <regex>
#include <string>

/**
 * @brief VersionObjectSemVer class.
 *
 */
class VersionObjectSemVer final : public IVersionObject
{
private:
    static std::regex parserRegex;
    uint32_t major;
    uint32_t minor;
    uint32_t patch;
    std::string preRelease;
    std::string buildMetadata;

public:
    /**
     * @brief Constructor.
     *
     * @param version version string to create object from.
     */
    VersionObjectSemVer(const std::string& version)
    {
        std::smatch parserMatches;
        if ((std::regex_match(version, parserMatches, parserRegex) == false) || (parserMatches.size() != 6))
        {
            throw std::runtime_error {"Error creating " + std::string(typeid(*this).name())};
        }

        major = static_cast<uint32_t>(std::stoul(parserMatches.str(1)));
        minor = static_cast<uint32_t>(std::stoul(parserMatches.str(2)));
        patch = static_cast<uint32_t>(std::stoul(parserMatches.str(3)));
        preRelease = parserMatches[4];
        buildMetadata = parserMatches[5];
    }

    virtual ~VersionObjectSemVer() = default;

    /**
     * @brief Returns the VersionObjectType of this class.
     *
     * @return VersionObjectType.
     */
    VersionObjectType getType()
    {
        return VersionObjectType::SemVer;
    }

    /**
     * @brief Comparison operator ==.
     *
     * @param b comparison rhs object.
     * @return true/false according to equality condition.
     */
    bool operator==(const IVersionObject& b) const
    {
        const VersionObjectSemVer* pB = dynamic_cast<const VersionObjectSemVer*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }
        return (major == pB->major && minor == pB->minor && patch == pB->patch && preRelease == pB->preRelease);
    }

    /**
     * @brief Comparison operator <.
     *
     * @param b comparison rhs object.
     * @return true/false according to less than condition.
     */
    bool operator<(const IVersionObject& b) const
    {
        const VersionObjectSemVer* pB = dynamic_cast<const VersionObjectSemVer*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }

        if (major < pB->major)
        {
            return true;
        }
        else if (major > pB->major)
        {
            return false;
        }

        if (minor < pB->minor)
        {
            return true;
        }
        else if (minor > pB->minor)
        {
            return false;
        }

        if (patch < pB->patch)
        {
            return true;
        }
        else if (patch > pB->patch)
        {
            return false;
        }

        if (!preRelease.empty() && pB->preRelease.empty())
        {
            return true;
        }
        else if (!preRelease.empty() && !pB->preRelease.empty())
        {
            if (preRelease.compare(pB->preRelease) < 0)
            {
                return true;
            }
        }

        return false;
    }
};

#endif // _VERSION_OBJECT_SEMVER_HPP
