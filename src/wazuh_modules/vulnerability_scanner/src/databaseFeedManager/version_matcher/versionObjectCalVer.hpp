/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_OBJECT_CALVER_HPP
#define _VERSION_OBJECT_CALVER_HPP

#include "iVersionObjectInterface.hpp"
#include <iostream>
#include <memory>
#include <regex>
#include <string>

/**
 * @brief VersionObjectCalVer class.
 *
 */
class VersionObjectCalVer final : public IVersionObject
{
private:
    static std::regex parserRegex;
    uint16_t year;
    uint8_t month;
    uint8_t day;
    uint32_t micro;

public:
    /**
     * @brief Constructor.
     *
     * @param version version string to create object from.
     */
    VersionObjectCalVer(const std::string version)
    {
        std::smatch parserMatches;
        if ((std::regex_match(version, parserMatches, parserRegex) == false) || (parserMatches.size() != 5))
        {
            throw std::runtime_error {"Error creating " + std::string(typeid(*this).name())};
        }

        year = (parserMatches.str(1).size() == 2) ? static_cast<uint16_t>(std::stoul(parserMatches.str(1))) + 2000
                                                  : static_cast<uint16_t>(std::stoul(parserMatches.str(1)));

        if (!parserMatches.str(2).empty())
        {
            month = static_cast<uint8_t>(std::stoul(parserMatches.str(2).substr(1)));
            if (month < 1 || month > 12)
            {
                throw std::runtime_error {"Error creating " + std::string(typeid(*this).name())};
            }
        }
        else
        {
            month = 0;
        }

        if (!parserMatches.str(3).empty())
        {
            day = static_cast<uint8_t>(std::stoul(parserMatches.str(3).substr(1)));
            if (day < 1 || day > 31)
            {
                throw std::runtime_error {"Error creating " + std::string(typeid(*this).name())};
            }
        }
        else
        {
            day = 0;
        }

        micro = parserMatches.str(4).empty() ? 0 : static_cast<uint32_t>(std::stoul(parserMatches.str(4).substr(1)));
    }

    // LCOV_EXCL_START
    virtual ~VersionObjectCalVer() = default;
    // LCOV_EXCL_STOP

    /**
     * @brief Returns the VersionObjectType of this class.
     *
     * @return VersionObjectType.
     */
    VersionObjectType getType()
    {
        return VersionObjectType::CalVer;
    }

    /**
     * @brief Comparison operator ==.
     *
     * @param b comparison rhs object.
     * @return true/false according to equality condition.
     */
    bool operator==(const IVersionObject& b) const
    {
        const VersionObjectCalVer* pB = dynamic_cast<const VersionObjectCalVer*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }
        return (year == pB->year && month == pB->month && day == pB->day && micro == pB->micro);
    }

    /**
     * @brief Comparison operator <.
     *
     * @param b comparison rhs object.
     * @return true/false according to less than condition.
     */
    bool operator<(const IVersionObject& b) const
    {
        const VersionObjectCalVer* pB = dynamic_cast<const VersionObjectCalVer*>(&b);
        if (pB == nullptr)
        {
            throw std::runtime_error {"Error casting VersionObject type"};
        }

        if (year < pB->year)
        {
            return true;
        }
        else if (year > pB->year)
        {
            return false;
        }

        if (month < pB->month)
        {
            return true;
        }
        else if (month > pB->month)
        {
            return false;
        }

        if (day < pB->day)
        {
            return true;
        }
        else if (day > pB->day)
        {
            return false;
        }

        return micro < pB->micro;
    }
};

#endif // _VERSION_OBJECT_CALVER_HPP
